type User @entity {
    "user address"
    id: ID!
    "swapped volume"
    usdcSwapped: BigDecimal!
    "swapped times"
    txCount: BigInt!
    "liquidity Positions"
    liquidityPositions: [LiquidityPosition!] @derivedFrom(field: "user")
}

type LiquidityPosition @entity {
    "user address - pair address"
    id: ID!
    "user"
    user: User!
    "pair"
    pair: Pair!
    "lp token balance"
    liquidityTokenBalance: BigDecimal!
}

type Token @entity {
    "token address"
    id: ID!

    "token symbol"
    symbol: String!
    "token name"
    name: String!
    "token decimals"
    decimals: BigInt!
    "total supply"
    totalSupply: BigInt!

    "total trade volume"
    tradeVolume: BigDecimal!
    "total trade trade volume of usd"
    tradeVolumeUSDC: BigDecimal!

    "transactions across all pairs"
    txCount: BigInt!

    "liquidity across all pairs"
    totalLiquidityOnDODO: BigDecimal!

    "derived usdc prices"
    priceUSDC: BigDecimal!
}

type LpToken @entity {
    "token address"
    id: ID!

    "token symbol"
    symbol: String!
    "token name"
    name: String!
    "token decimals"
    decimals: BigInt!
    "total supply"
    totalSupply: BigInt!
}

type OrderHistory @entity {
    "order id"
    id: ID!
    "transaction hash"
    hash: String!
    "block"
    block: BigInt!
    "timestamp of this transaction"
    timestamp: BigInt!
    "msg sender"
    sender: Bytes!
    "tx from address"
    from: Bytes!
    "from token"
    fromToken: Token!
    "to token"
    toToken: Token!
    "to address"
    to: Bytes!
    "log index"
    logIndex: BigInt
    "from token amount"
    amountIn: BigDecimal!
    "to token amount"
    amountOut: BigDecimal!

    "usdc amount"
    amountUSDC: BigDecimal!
}

type LiquidityHistory @entity {
    "txid - logindex"
    id: ID!
    "hash"
    hash: String!
    "block number"
    block: BigInt!
    "timestamp"
    timestamp: BigInt!
    "user"
    user: User!
    "from"
    from: Bytes!
    "amount"
    amount: BigDecimal!
    "balance"
    balance: BigDecimal!
    "pair"
    pair: Pair!
    "base reserve"
    baseReserve: BigDecimal
    "quote reserve"
    quoteReserve: BigDecimal
    "lp token total supply"
    lpTokenTotalSupply: BigDecimal
    "base token price"
    baseTokenPrice: BigDecimal
    "quote token Price"
    quoteTokenPrice: BigDecimal
}

type Pair @entity {
    "dvm pool address"
    id: ID!
    "pool type"
    type: String!
    "creator"
    creator: Bytes!
    "base token"
    baseToken: Token!
    "quote token"
    quoteToken: Token!
    "i"
    i: BigInt
    "k"
    k: BigInt
    "lp Fee Rate"
    lpFeeRate: BigDecimal!

    "base LP token, for DPP is null, for dodo v1 lpToken is different"
    baseLpToken: LpToken
    "quote LP token,for DPP is null, for dodo v1 lpToken is different"
    quoteLpToken: LpToken

    "base token reserve"
    baseReserve: BigDecimal!
    "quote token reserve"
    quoteReserve: BigDecimal!
    "reserve usd data"
    amountUSDC: BigDecimal!
    "trade volume of basetoken"
    volumeBaseToken: BigDecimal!
    "trade volume of quotetoken"
    volumeQuoteToken: BigDecimal!

    "transactions count"
    txCount: BigInt!
    "createAtTimestamp"
    createdAtTimestamp: BigInt!
    "createAtBlock"
    createdAtBlockNumber: BigInt!
    "liquidity provider count"
    liquidityProviderCount: BigInt!

    "mtFee Rate Model"
    mtFeeRateModel: Bytes!
    "maintainer"
    maintainer: Bytes!
}

type Swap @entity {
    "transaction hash + \"-\" + index in swaps Transaction array"
    id: ID!
    "transaction hash"
    hash: String!
    "transaction timestamp"
    timestamp: BigInt!
    "trading pair"
    pair: Pair!

    "msg.sender"
    sender: Bytes!
    "tx from address"
    from: Bytes!
    "from token"
    fromToken: Token!
    "to token"
    toToken: Token!
    "to address"
    to: Bytes!
    "log index"
    logIndex: BigInt!
    "from token amount"
    amountIn: BigDecimal!
    "to token amount"
    amountOut: BigDecimal!

    "usdc amount"
    amountUSDC: BigDecimal!
}

type FlashLoan @entity {
    "transaction hash + \"-\" + index in swaps Transaction array"
    id: ID!
    "transaction hash"
    hash: String!
    "transaction timestamp"
    timestamp: BigInt!
    "trading pair"
    pair: Pair!
    "msg.sender"
    sender: Bytes!
    "tx from address"
    from: Bytes!
    "base amount"
    baseAmount: BigDecimal!
    "quote amount"
    quoteAmount: BigDecimal!
}

type PairDayData @entity {
    "pair address - day id"
    id: ID!
    "uinx timestamp(start of day)"
    date: Int!
    "pair address"
    pairAddress: Bytes!
    "base token"
    baseToken: Token!
    "quote token"
    quoteToken: Token!

    "base token reserve"
    baseTokenReserve: BigDecimal!
    "quote token reserve"
    quoteTokenReserve: BigDecimal!

    "total supply of base lp token"
    baseLpTokenTotalSupply: BigDecimal!
    "total supply of quote lp token"
    quoteLpTokenTotalSupply: BigDecimal!

    "reserve volume by usdc"
    reserveUSDC: BigDecimal!

    "base token volume"
    dailyVolumeBase: BigDecimal!
    "quote token volume"
    dailyVolumeQuote: BigDecimal!
    "usdc volume"
    dailyVolumeUSDC: BigDecimal!
    "daily txns"
    dailyTxns: BigInt!
    "trading fee"
    fee: BigDecimal!
}

type TokenDayData @entity {
    "token address - day id"
    id: ID!
    "uinx timestamp(start of day)"
    date: Int!
    "token address"
    token: Token!

    "volume stats"
    dailyVolumeToken: BigDecimal!
    dailyVolumeUSDC: BigDecimal!
    dailyTxns: BigInt!

    "liquidity stats"
    totalLiquidityToken: BigDecimal!
    totalLiquidityUSDC: BigDecimal!

    "price stats"
    priceUSDC: BigDecimal!
    "trading fee"
    fee: BigDecimal!
}

type CrowdPooling @entity {
    "cp address"
    id: ID!
    "creator"
    creator: Bytes!
    "base token"
    baseToken: Token!
    "quote token"
    quoteToken: Token!
    "bid start time"
    bidStartTime: BigInt!
    "bid end time"
    bidEndTime: BigInt!
    "clam end time"
    calmEndTime: BigInt!
    "freeze duration"
    freezeDuration: BigInt!
    "vesting duration"
    vestingDuration: BigInt!
    "i"
    i: BigInt!
    "k"
    k: BigInt!

    "pool quote cap"
    poolQuoteCap: BigDecimal!
    "total base"
    totalBase: BigDecimal!
    "total quote in pool"
    poolQuote: BigDecimal!
}

type BidPosition @entity {
    "user address - pair address"
    id: ID!
    "user"
    user: User!
    "cp address"
    cp: CrowdPooling!
    "shares"
    shares: BigDecimal!
    "total quote invested"
    investedQuote: BigDecimal!
}

type BidHistory @entity {
    "txid - logindex"
    id: ID!
    "user"
    user: User!
    "cp address"
    cp: CrowdPooling!
    "action ：bid、cancle"
    action: String!
    "hash"
    hash: String!
    "block"
    block: BigInt!
    "timestamp"
    timestamp: BigInt!
    "quote"
    quote: BigDecimal!
    "share"
    share: BigDecimal!
}

type CrowdPoolingDayData @entity{
    "cp address - day id"
    id: ID!
    "uinx timestamp(start of day)"
    date: Int!
    "CrowdPooling"
    crowdPooling: CrowdPooling!
    "total quote in durnation = taker tokens"
    investedQuote: BigDecimal!
    "invest count"
    investCount: BigInt!
    "creator: newly investor"
    newcome: BigInt!
    "total quote in pool"
    poolQuote: BigDecimal!
}
