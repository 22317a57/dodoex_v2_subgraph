// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class NewCP extends ethereum.Event {
  get params(): NewCP__Params {
    return new NewCP__Params(this);
  }
}

export class NewCP__Params {
  _event: NewCP;

  constructor(event: NewCP) {
    this._event = event;
  }

  get baseToken(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get quoteToken(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get creator(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get cp(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class OwnershipTransferPrepared extends ethereum.Event {
  get params(): OwnershipTransferPrepared__Params {
    return new OwnershipTransferPrepared__Params(this);
  }
}

export class OwnershipTransferPrepared__Params {
  _event: OwnershipTransferPrepared;

  constructor(event: OwnershipTransferPrepared) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class CrowdPoolingFactory__getCrowdPoolingBidirectionResult {
  value0: Array<Address>;
  value1: Array<Address>;

  constructor(value0: Array<Address>, value1: Array<Address>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddressArray(this.value0));
    map.set("value1", ethereum.Value.fromAddressArray(this.value1));
    return map;
  }
}

export class CrowdPoolingFactory extends ethereum.SmartContract {
  static bind(address: Address): CrowdPoolingFactory {
    return new CrowdPoolingFactory("CrowdPoolingFactory", address);
  }

  _CLONE_FACTORY_(): Address {
    let result = super.call(
      "_CLONE_FACTORY_",
      "_CLONE_FACTORY_():(address)",
      []
    );

    return result[0].toAddress();
  }

  try__CLONE_FACTORY_(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "_CLONE_FACTORY_",
      "_CLONE_FACTORY_():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _CP_TEMPLATE_(): Address {
    let result = super.call("_CP_TEMPLATE_", "_CP_TEMPLATE_():(address)", []);

    return result[0].toAddress();
  }

  try__CP_TEMPLATE_(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "_CP_TEMPLATE_",
      "_CP_TEMPLATE_():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _DEFAULT_GAS_PRICE_SOURCE_(): Address {
    let result = super.call(
      "_DEFAULT_GAS_PRICE_SOURCE_",
      "_DEFAULT_GAS_PRICE_SOURCE_():(address)",
      []
    );

    return result[0].toAddress();
  }

  try__DEFAULT_GAS_PRICE_SOURCE_(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "_DEFAULT_GAS_PRICE_SOURCE_",
      "_DEFAULT_GAS_PRICE_SOURCE_():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _DEFAULT_MAINTAINER_(): Address {
    let result = super.call(
      "_DEFAULT_MAINTAINER_",
      "_DEFAULT_MAINTAINER_():(address)",
      []
    );

    return result[0].toAddress();
  }

  try__DEFAULT_MAINTAINER_(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "_DEFAULT_MAINTAINER_",
      "_DEFAULT_MAINTAINER_():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _DEFAULT_MT_FEE_RATE_MODEL_(): Address {
    let result = super.call(
      "_DEFAULT_MT_FEE_RATE_MODEL_",
      "_DEFAULT_MT_FEE_RATE_MODEL_():(address)",
      []
    );

    return result[0].toAddress();
  }

  try__DEFAULT_MT_FEE_RATE_MODEL_(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "_DEFAULT_MT_FEE_RATE_MODEL_",
      "_DEFAULT_MT_FEE_RATE_MODEL_():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _DEFAULT_PERMISSION_MANAGER_(): Address {
    let result = super.call(
      "_DEFAULT_PERMISSION_MANAGER_",
      "_DEFAULT_PERMISSION_MANAGER_():(address)",
      []
    );

    return result[0].toAddress();
  }

  try__DEFAULT_PERMISSION_MANAGER_(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "_DEFAULT_PERMISSION_MANAGER_",
      "_DEFAULT_PERMISSION_MANAGER_():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _FEE_RATE_MODEL_TEMPLATE_(): Address {
    let result = super.call(
      "_FEE_RATE_MODEL_TEMPLATE_",
      "_FEE_RATE_MODEL_TEMPLATE_():(address)",
      []
    );

    return result[0].toAddress();
  }

  try__FEE_RATE_MODEL_TEMPLATE_(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "_FEE_RATE_MODEL_TEMPLATE_",
      "_FEE_RATE_MODEL_TEMPLATE_():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _NEW_OWNER_(): Address {
    let result = super.call("_NEW_OWNER_", "_NEW_OWNER_():(address)", []);

    return result[0].toAddress();
  }

  try__NEW_OWNER_(): ethereum.CallResult<Address> {
    let result = super.tryCall("_NEW_OWNER_", "_NEW_OWNER_():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _OWNER_(): Address {
    let result = super.call("_OWNER_", "_OWNER_():(address)", []);

    return result[0].toAddress();
  }

  try__OWNER_(): ethereum.CallResult<Address> {
    let result = super.tryCall("_OWNER_", "_OWNER_():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _REGISTRY_(param0: Address, param1: Address, param2: BigInt): Address {
    let result = super.call(
      "_REGISTRY_",
      "_REGISTRY_(address,address,uint256):(address)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2)
      ]
    );

    return result[0].toAddress();
  }

  try__REGISTRY_(
    param0: Address,
    param1: Address,
    param2: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "_REGISTRY_",
      "_REGISTRY_(address,address,uint256):(address)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _UNOWNED_DVM_FACTORY_(): Address {
    let result = super.call(
      "_UNOWNED_DVM_FACTORY_",
      "_UNOWNED_DVM_FACTORY_():(address)",
      []
    );

    return result[0].toAddress();
  }

  try__UNOWNED_DVM_FACTORY_(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "_UNOWNED_DVM_FACTORY_",
      "_UNOWNED_DVM_FACTORY_():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _USER_REGISTRY_(param0: Address, param1: BigInt): Address {
    let result = super.call(
      "_USER_REGISTRY_",
      "_USER_REGISTRY_(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toAddress();
  }

  try__USER_REGISTRY_(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "_USER_REGISTRY_",
      "_USER_REGISTRY_(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _X_(): BigInt {
    let result = super.call("_X_", "_X_():(uint256)", []);

    return result[0].toBigInt();
  }

  try__X_(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("_X_", "_X_():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _Y_(): BigInt {
    let result = super.call("_Y_", "_Y_():(uint256)", []);

    return result[0].toBigInt();
  }

  try__Y_(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("_Y_", "_Y_():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  createCrowdPooling(): Address {
    let result = super.call(
      "createCrowdPooling",
      "createCrowdPooling():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_createCrowdPooling(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "createCrowdPooling",
      "createCrowdPooling():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getCrowdPooling(baseToken: Address, quoteToken: Address): Array<Address> {
    let result = super.call(
      "getCrowdPooling",
      "getCrowdPooling(address,address):(address[])",
      [
        ethereum.Value.fromAddress(baseToken),
        ethereum.Value.fromAddress(quoteToken)
      ]
    );

    return result[0].toAddressArray();
  }

  try_getCrowdPooling(
    baseToken: Address,
    quoteToken: Address
  ): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getCrowdPooling",
      "getCrowdPooling(address,address):(address[])",
      [
        ethereum.Value.fromAddress(baseToken),
        ethereum.Value.fromAddress(quoteToken)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getCrowdPoolingBidirection(
    token0: Address,
    token1: Address
  ): CrowdPoolingFactory__getCrowdPoolingBidirectionResult {
    let result = super.call(
      "getCrowdPoolingBidirection",
      "getCrowdPoolingBidirection(address,address):(address[],address[])",
      [ethereum.Value.fromAddress(token0), ethereum.Value.fromAddress(token1)]
    );

    return new CrowdPoolingFactory__getCrowdPoolingBidirectionResult(
      result[0].toAddressArray(),
      result[1].toAddressArray()
    );
  }

  try_getCrowdPoolingBidirection(
    token0: Address,
    token1: Address
  ): ethereum.CallResult<
    CrowdPoolingFactory__getCrowdPoolingBidirectionResult
  > {
    let result = super.tryCall(
      "getCrowdPoolingBidirection",
      "getCrowdPoolingBidirection(address,address):(address[],address[])",
      [ethereum.Value.fromAddress(token0), ethereum.Value.fromAddress(token1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new CrowdPoolingFactory__getCrowdPoolingBidirectionResult(
        value[0].toAddressArray(),
        value[1].toAddressArray()
      )
    );
  }

  getCrowdPoolingByUser(user: Address): Array<Address> {
    let result = super.call(
      "getCrowdPoolingByUser",
      "getCrowdPoolingByUser(address):(address[])",
      [ethereum.Value.fromAddress(user)]
    );

    return result[0].toAddressArray();
  }

  try_getCrowdPoolingByUser(
    user: Address
  ): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getCrowdPoolingByUser",
      "getCrowdPoolingByUser(address):(address[])",
      [ethereum.Value.fromAddress(user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get cloneFactory(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get cpTemplate(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get unOwnedDvmFactory(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get feeRateModelTemplate(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get defaultMaintainer(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get defaultMtFeeRateModel(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get defaultPermissionManager(): Address {
    return this._call.inputValues[6].value.toAddress();
  }

  get defaultGasPriceSource(): Address {
    return this._call.inputValues[7].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ClaimOwnershipCall extends ethereum.Call {
  get inputs(): ClaimOwnershipCall__Inputs {
    return new ClaimOwnershipCall__Inputs(this);
  }

  get outputs(): ClaimOwnershipCall__Outputs {
    return new ClaimOwnershipCall__Outputs(this);
  }
}

export class ClaimOwnershipCall__Inputs {
  _call: ClaimOwnershipCall;

  constructor(call: ClaimOwnershipCall) {
    this._call = call;
  }
}

export class ClaimOwnershipCall__Outputs {
  _call: ClaimOwnershipCall;

  constructor(call: ClaimOwnershipCall) {
    this._call = call;
  }
}

export class InitOwnerCall extends ethereum.Call {
  get inputs(): InitOwnerCall__Inputs {
    return new InitOwnerCall__Inputs(this);
  }

  get outputs(): InitOwnerCall__Outputs {
    return new InitOwnerCall__Outputs(this);
  }
}

export class InitOwnerCall__Inputs {
  _call: InitOwnerCall;

  constructor(call: InitOwnerCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class InitOwnerCall__Outputs {
  _call: InitOwnerCall;

  constructor(call: InitOwnerCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class CreateCrowdPoolingCall extends ethereum.Call {
  get inputs(): CreateCrowdPoolingCall__Inputs {
    return new CreateCrowdPoolingCall__Inputs(this);
  }

  get outputs(): CreateCrowdPoolingCall__Outputs {
    return new CreateCrowdPoolingCall__Outputs(this);
  }
}

export class CreateCrowdPoolingCall__Inputs {
  _call: CreateCrowdPoolingCall;

  constructor(call: CreateCrowdPoolingCall) {
    this._call = call;
  }
}

export class CreateCrowdPoolingCall__Outputs {
  _call: CreateCrowdPoolingCall;

  constructor(call: CreateCrowdPoolingCall) {
    this._call = call;
  }

  get newCrowdPooling(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class InitCrowdPoolingCall extends ethereum.Call {
  get inputs(): InitCrowdPoolingCall__Inputs {
    return new InitCrowdPoolingCall__Inputs(this);
  }

  get outputs(): InitCrowdPoolingCall__Outputs {
    return new InitCrowdPoolingCall__Outputs(this);
  }
}

export class InitCrowdPoolingCall__Inputs {
  _call: InitCrowdPoolingCall;

  constructor(call: InitCrowdPoolingCall) {
    this._call = call;
  }

  get cpAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get creator(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get baseToken(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get quoteToken(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get timeLine(): Array<BigInt> {
    return this._call.inputValues[4].value.toBigIntArray();
  }

  get valueList(): Array<BigInt> {
    return this._call.inputValues[5].value.toBigIntArray();
  }
}

export class InitCrowdPoolingCall__Outputs {
  _call: InitCrowdPoolingCall;

  constructor(call: InitCrowdPoolingCall) {
    this._call = call;
  }
}

export class SetXYCall extends ethereum.Call {
  get inputs(): SetXYCall__Inputs {
    return new SetXYCall__Inputs(this);
  }

  get outputs(): SetXYCall__Outputs {
    return new SetXYCall__Outputs(this);
  }
}

export class SetXYCall__Inputs {
  _call: SetXYCall;

  constructor(call: SetXYCall) {
    this._call = call;
  }

  get x(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get y(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetXYCall__Outputs {
  _call: SetXYCall;

  constructor(call: SetXYCall) {
    this._call = call;
  }
}
