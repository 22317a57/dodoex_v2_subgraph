// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save User entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save User entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("User", id.toString(), this);
  }

  static load(id: string): User | null {
    return store.get("User", id) as User | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get stakingPower(): BigInt {
    let value = this.get("stakingPower");
    return value.toBigInt();
  }

  set stakingPower(value: BigInt) {
    this.set("stakingPower", Value.fromBigInt(value));
  }

  get superiorSP(): BigInt {
    let value = this.get("superiorSP");
    return value.toBigInt();
  }

  set superiorSP(value: BigInt) {
    this.set("superiorSP", Value.fromBigInt(value));
  }

  get superior(): Bytes {
    let value = this.get("superior");
    return value.toBytes();
  }

  set superior(value: Bytes) {
    this.set("superior", Value.fromBytes(value));
  }

  get credit(): BigDecimal {
    let value = this.get("credit");
    return value.toBigDecimal();
  }

  set credit(value: BigDecimal) {
    this.set("credit", Value.fromBigDecimal(value));
  }

  get creditOfSuperior(): BigDecimal {
    let value = this.get("creditOfSuperior");
    return value.toBigDecimal();
  }

  set creditOfSuperior(value: BigDecimal) {
    this.set("creditOfSuperior", Value.fromBigDecimal(value));
  }

  get spFromInvited(): BigInt {
    let value = this.get("spFromInvited");
    return value.toBigInt();
  }

  set spFromInvited(value: BigInt) {
    this.set("spFromInvited", Value.fromBigInt(value));
  }

  get mintAmount(): BigDecimal {
    let value = this.get("mintAmount");
    return value.toBigDecimal();
  }

  set mintAmount(value: BigDecimal) {
    this.set("mintAmount", Value.fromBigDecimal(value));
  }

  get redeemRecieveAmount(): BigDecimal {
    let value = this.get("redeemRecieveAmount");
    return value.toBigDecimal();
  }

  set redeemRecieveAmount(value: BigDecimal) {
    this.set("redeemRecieveAmount", Value.fromBigDecimal(value));
  }

  get redeemFeeAmount(): BigDecimal {
    let value = this.get("redeemFeeAmount");
    return value.toBigDecimal();
  }

  set redeemFeeAmount(value: BigDecimal) {
    this.set("redeemFeeAmount", Value.fromBigDecimal(value));
  }

  get redeemBurnAmount(): BigDecimal {
    let value = this.get("redeemBurnAmount");
    return value.toBigDecimal();
  }

  set redeemBurnAmount(value: BigDecimal) {
    this.set("redeemBurnAmount", Value.fromBigDecimal(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class UserOperationHistory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save UserOperationHistory entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save UserOperationHistory entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("UserOperationHistory", id.toString(), this);
  }

  static load(id: string): UserOperationHistory | null {
    return store.get("UserOperationHistory", id) as UserOperationHistory | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get type(): string {
    let value = this.get("type");
    return value.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    return value.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get amount(): BigDecimal {
    let value = this.get("amount");
    return value.toBigDecimal();
  }

  set amount(value: BigDecimal) {
    this.set("amount", Value.fromBigDecimal(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get superiorSpChange(): BigInt {
    let value = this.get("superiorSpChange");
    return value.toBigInt();
  }

  set superiorSpChange(value: BigInt) {
    this.set("superiorSpChange", Value.fromBigInt(value));
  }

  get superiorCreditChange(): BigDecimal {
    let value = this.get("superiorCreditChange");
    return value.toBigDecimal();
  }

  set superiorCreditChange(value: BigDecimal) {
    this.set("superiorCreditChange", Value.fromBigDecimal(value));
  }
}

export class MintHistory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save MintHistory entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save MintHistory entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("MintHistory", id.toString(), this);
  }

  static load(id: string): MintHistory | null {
    return store.get("MintHistory", id) as MintHistory | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    return value.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get amount(): BigDecimal {
    let value = this.get("amount");
    return value.toBigDecimal();
  }

  set amount(value: BigDecimal) {
    this.set("amount", Value.fromBigDecimal(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class RedeemHistory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save RedeemHistory entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save RedeemHistory entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("RedeemHistory", id.toString(), this);
  }

  static load(id: string): RedeemHistory | null {
    return store.get("RedeemHistory", id) as RedeemHistory | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    return value.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get recieve(): BigDecimal {
    let value = this.get("recieve");
    return value.toBigDecimal();
  }

  set recieve(value: BigDecimal) {
    this.set("recieve", Value.fromBigDecimal(value));
  }

  get burn(): BigDecimal {
    let value = this.get("burn");
    return value.toBigDecimal();
  }

  set burn(value: BigDecimal) {
    this.set("burn", Value.fromBigDecimal(value));
  }

  get fee(): BigDecimal {
    let value = this.get("fee");
    return value.toBigDecimal();
  }

  set fee(value: BigDecimal) {
    this.set("fee", Value.fromBigDecimal(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class DODO extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save DODO entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save DODO entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("DODO", id.toString(), this);
  }

  static load(id: string): DODO | null {
    return store.get("DODO", id) as DODO | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get decimals(): BigInt {
    let value = this.get("decimals");
    return value.toBigInt();
  }

  set decimals(value: BigInt) {
    this.set("decimals", Value.fromBigInt(value));
  }

  get totalSupply(): BigInt {
    let value = this.get("totalSupply");
    return value.toBigInt();
  }

  set totalSupply(value: BigInt) {
    this.set("totalSupply", Value.fromBigInt(value));
  }
}

export class vDODO extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save vDODO entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save vDODO entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("vDODO", id.toString(), this);
  }

  static load(id: string): vDODO | null {
    return store.get("vDODO", id) as vDODO | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get decimals(): BigInt {
    let value = this.get("decimals");
    return value.toBigInt();
  }

  set decimals(value: BigInt) {
    this.set("decimals", Value.fromBigInt(value));
  }

  get totalUsers(): BigInt {
    let value = this.get("totalUsers");
    return value.toBigInt();
  }

  set totalUsers(value: BigInt) {
    this.set("totalUsers", Value.fromBigInt(value));
  }

  get dodo(): Bytes {
    let value = this.get("dodo");
    return value.toBytes();
  }

  set dodo(value: Bytes) {
    this.set("dodo", Value.fromBytes(value));
  }

  get mintAmount(): BigDecimal {
    let value = this.get("mintAmount");
    return value.toBigDecimal();
  }

  set mintAmount(value: BigDecimal) {
    this.set("mintAmount", Value.fromBigDecimal(value));
  }

  get redeemAmount(): BigDecimal {
    let value = this.get("redeemAmount");
    return value.toBigDecimal();
  }

  set redeemAmount(value: BigDecimal) {
    this.set("redeemAmount", Value.fromBigDecimal(value));
  }

  get feeAmount(): BigDecimal {
    let value = this.get("feeAmount");
    return value.toBigDecimal();
  }

  set feeAmount(value: BigDecimal) {
    this.set("feeAmount", Value.fromBigDecimal(value));
  }

  get burnAmount(): BigDecimal {
    let value = this.get("burnAmount");
    return value.toBigDecimal();
  }

  set burnAmount(value: BigDecimal) {
    this.set("burnAmount", Value.fromBigDecimal(value));
  }

  get dodoBalance(): BigDecimal {
    let value = this.get("dodoBalance");
    return value.toBigDecimal();
  }

  set dodoBalance(value: BigDecimal) {
    this.set("dodoBalance", Value.fromBigDecimal(value));
  }

  get dodoPerBlock(): BigDecimal {
    let value = this.get("dodoPerBlock");
    return value.toBigDecimal();
  }

  set dodoPerBlock(value: BigDecimal) {
    this.set("dodoPerBlock", Value.fromBigDecimal(value));
  }

  get totalBlockReward(): BigDecimal {
    let value = this.get("totalBlockReward");
    return value.toBigDecimal();
  }

  set totalBlockReward(value: BigDecimal) {
    this.set("totalBlockReward", Value.fromBigDecimal(value));
  }

  get totalBlockDistribution(): BigDecimal {
    let value = this.get("totalBlockDistribution");
    return value.toBigDecimal();
  }

  set totalBlockDistribution(value: BigDecimal) {
    this.set("totalBlockDistribution", Value.fromBigDecimal(value));
  }

  get totalDonate(): BigDecimal {
    let value = this.get("totalDonate");
    return value.toBigDecimal();
  }

  set totalDonate(value: BigDecimal) {
    this.set("totalDonate", Value.fromBigDecimal(value));
  }

  get totalStakingPower(): BigInt {
    let value = this.get("totalStakingPower");
    return value.toBigInt();
  }

  set totalStakingPower(value: BigInt) {
    this.set("totalStakingPower", Value.fromBigInt(value));
  }
}
