// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Burn extends ethereum.Event {
  get params(): Burn__Params {
    return new Burn__Params(this);
  }
}

export class Burn__Params {
  _event: Burn;

  constructor(event: Burn) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class BuyShares extends ethereum.Event {
  get params(): BuyShares__Params {
    return new BuyShares__Params(this);
  }
}

export class BuyShares__Params {
  _event: BuyShares;

  constructor(event: BuyShares) {
    this._event = event;
  }

  get to(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get increaseShares(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get totalShares(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class DODOFlashLoan extends ethereum.Event {
  get params(): DODOFlashLoan__Params {
    return new DODOFlashLoan__Params(this);
  }
}

export class DODOFlashLoan__Params {
  _event: DODOFlashLoan;

  constructor(event: DODOFlashLoan) {
    this._event = event;
  }

  get borrower(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get assetTo(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get baseAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get quoteAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class DODOSwap extends ethereum.Event {
  get params(): DODOSwap__Params {
    return new DODOSwap__Params(this);
  }
}

export class DODOSwap__Params {
  _event: DODOSwap;

  constructor(event: DODOSwap) {
    this._event = event;
  }

  get fromToken(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get toToken(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get fromAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get toAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get trader(): Address {
    return this._event.parameters[4].value.toAddress();
  }
}

export class Mint extends ethereum.Event {
  get params(): Mint__Params {
    return new Mint__Params(this);
  }
}

export class Mint__Params {
  _event: Mint;

  constructor(event: Mint) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class OwnershipTransferPrepared extends ethereum.Event {
  get params(): OwnershipTransferPrepared__Params {
    return new OwnershipTransferPrepared__Params(this);
  }
}

export class OwnershipTransferPrepared__Params {
  _event: OwnershipTransferPrepared;

  constructor(event: OwnershipTransferPrepared) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class SellShares extends ethereum.Event {
  get params(): SellShares__Params {
    return new SellShares__Params(this);
  }
}

export class SellShares__Params {
  _event: SellShares;

  constructor(event: SellShares) {
    this._event = event;
  }

  get payer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get decreaseShares(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get totalShares(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class SetBuy extends ethereum.Event {
  get params(): SetBuy__Params {
    return new SetBuy__Params(this);
  }
}

export class SetBuy__Params {
  _event: SetBuy;

  constructor(event: SetBuy) {
    this._event = event;
  }

  get allow(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }
}

export class SetGasPriceSource extends ethereum.Event {
  get params(): SetGasPriceSource__Params {
    return new SetGasPriceSource__Params(this);
  }
}

export class SetGasPriceSource__Params {
  _event: SetGasPriceSource;

  constructor(event: SetGasPriceSource) {
    this._event = event;
  }

  get oldAddr(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newAddr(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class SetLpFeeRate extends ethereum.Event {
  get params(): SetLpFeeRate__Params {
    return new SetLpFeeRate__Params(this);
  }
}

export class SetLpFeeRate__Params {
  _event: SetLpFeeRate;

  constructor(event: SetLpFeeRate) {
    this._event = event;
  }

  get newValue(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class SetLpFeeRateModel extends ethereum.Event {
  get params(): SetLpFeeRateModel__Params {
    return new SetLpFeeRateModel__Params(this);
  }
}

export class SetLpFeeRateModel__Params {
  _event: SetLpFeeRateModel;

  constructor(event: SetLpFeeRateModel) {
    this._event = event;
  }

  get oldAddr(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newAddr(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class SetMaintainer extends ethereum.Event {
  get params(): SetMaintainer__Params {
    return new SetMaintainer__Params(this);
  }
}

export class SetMaintainer__Params {
  _event: SetMaintainer;

  constructor(event: SetMaintainer) {
    this._event = event;
  }

  get oldAddr(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newAddr(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class SetMtFeeRate extends ethereum.Event {
  get params(): SetMtFeeRate__Params {
    return new SetMtFeeRate__Params(this);
  }
}

export class SetMtFeeRate__Params {
  _event: SetMtFeeRate;

  constructor(event: SetMtFeeRate) {
    this._event = event;
  }

  get newValue(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class SetMtFeeRateModel extends ethereum.Event {
  get params(): SetMtFeeRateModel__Params {
    return new SetMtFeeRateModel__Params(this);
  }
}

export class SetMtFeeRateModel__Params {
  _event: SetMtFeeRateModel;

  constructor(event: SetMtFeeRateModel) {
    this._event = event;
  }

  get oldAddr(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newAddr(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class SetSell extends ethereum.Event {
  get params(): SetSell__Params {
    return new SetSell__Params(this);
  }
}

export class SetSell__Params {
  _event: SetSell;

  constructor(event: SetSell) {
    this._event = event;
  }

  get allow(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }
}

export class SetTradePermissionManager extends ethereum.Event {
  get params(): SetTradePermissionManager__Params {
    return new SetTradePermissionManager__Params(this);
  }
}

export class SetTradePermissionManager__Params {
  _event: SetTradePermissionManager;

  constructor(event: SetTradePermissionManager) {
    this._event = event;
  }

  get oldAddr(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newAddr(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class DVM__buySharesResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class DVM__getPMMStateResultStateStruct extends ethereum.Tuple {
  get i(): BigInt {
    return this[0].toBigInt();
  }

  get K(): BigInt {
    return this[1].toBigInt();
  }

  get B(): BigInt {
    return this[2].toBigInt();
  }

  get Q(): BigInt {
    return this[3].toBigInt();
  }

  get B0(): BigInt {
    return this[4].toBigInt();
  }

  get Q0(): BigInt {
    return this[5].toBigInt();
  }

  get R(): i32 {
    return this[6].toI32();
  }
}

export class DVM__getPMMStateForCallResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: i32;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: i32
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set(
      "value6",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value6))
    );
    return map;
  }
}

export class DVM__getUserFeeRateResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class DVM__getUserTradePermissionResult {
  value0: boolean;
  value1: boolean;

  constructor(value0: boolean, value1: boolean) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromBoolean(this.value1));
    return map;
  }
}

export class DVM__getVaultReserveResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class DVM__querySellBaseResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class DVM__querySellQuoteResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class DVM__sellSharesResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class DVM extends ethereum.SmartContract {
  static bind(address: Address): DVM {
    return new DVM("DVM", address);
  }

  DOMAIN_SEPARATOR(): Bytes {
    let result = super.call(
      "DOMAIN_SEPARATOR",
      "DOMAIN_SEPARATOR():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DOMAIN_SEPARATOR(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DOMAIN_SEPARATOR",
      "DOMAIN_SEPARATOR():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  PERMIT_TYPEHASH(): Bytes {
    let result = super.call(
      "PERMIT_TYPEHASH",
      "PERMIT_TYPEHASH():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_PERMIT_TYPEHASH(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "PERMIT_TYPEHASH",
      "PERMIT_TYPEHASH():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  _BASE_RESERVE_(): BigInt {
    let result = super.call("_BASE_RESERVE_", "_BASE_RESERVE_():(uint256)", []);

    return result[0].toBigInt();
  }

  try__BASE_RESERVE_(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_BASE_RESERVE_",
      "_BASE_RESERVE_():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _BASE_TOKEN_(): Address {
    let result = super.call("_BASE_TOKEN_", "_BASE_TOKEN_():(address)", []);

    return result[0].toAddress();
  }

  try__BASE_TOKEN_(): ethereum.CallResult<Address> {
    let result = super.tryCall("_BASE_TOKEN_", "_BASE_TOKEN_():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _BUYING_CLOSE_(): boolean {
    let result = super.call("_BUYING_CLOSE_", "_BUYING_CLOSE_():(bool)", []);

    return result[0].toBoolean();
  }

  try__BUYING_CLOSE_(): ethereum.CallResult<boolean> {
    let result = super.tryCall("_BUYING_CLOSE_", "_BUYING_CLOSE_():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  _GAS_PRICE_LIMIT_(): Address {
    let result = super.call(
      "_GAS_PRICE_LIMIT_",
      "_GAS_PRICE_LIMIT_():(address)",
      []
    );

    return result[0].toAddress();
  }

  try__GAS_PRICE_LIMIT_(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "_GAS_PRICE_LIMIT_",
      "_GAS_PRICE_LIMIT_():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _I_(): BigInt {
    let result = super.call("_I_", "_I_():(uint256)", []);

    return result[0].toBigInt();
  }

  try__I_(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("_I_", "_I_():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _K_(): BigInt {
    let result = super.call("_K_", "_K_():(uint256)", []);

    return result[0].toBigInt();
  }

  try__K_(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("_K_", "_K_():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _LP_FEE_RATE_MODEL_(): Address {
    let result = super.call(
      "_LP_FEE_RATE_MODEL_",
      "_LP_FEE_RATE_MODEL_():(address)",
      []
    );

    return result[0].toAddress();
  }

  try__LP_FEE_RATE_MODEL_(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "_LP_FEE_RATE_MODEL_",
      "_LP_FEE_RATE_MODEL_():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _MAINTAINER_(): Address {
    let result = super.call("_MAINTAINER_", "_MAINTAINER_():(address)", []);

    return result[0].toAddress();
  }

  try__MAINTAINER_(): ethereum.CallResult<Address> {
    let result = super.tryCall("_MAINTAINER_", "_MAINTAINER_():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _MT_FEE_RATE_MODEL_(): Address {
    let result = super.call(
      "_MT_FEE_RATE_MODEL_",
      "_MT_FEE_RATE_MODEL_():(address)",
      []
    );

    return result[0].toAddress();
  }

  try__MT_FEE_RATE_MODEL_(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "_MT_FEE_RATE_MODEL_",
      "_MT_FEE_RATE_MODEL_():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _NEW_OWNER_(): Address {
    let result = super.call("_NEW_OWNER_", "_NEW_OWNER_():(address)", []);

    return result[0].toAddress();
  }

  try__NEW_OWNER_(): ethereum.CallResult<Address> {
    let result = super.tryCall("_NEW_OWNER_", "_NEW_OWNER_():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _OWNER_(): Address {
    let result = super.call("_OWNER_", "_OWNER_():(address)", []);

    return result[0].toAddress();
  }

  try__OWNER_(): ethereum.CallResult<Address> {
    let result = super.tryCall("_OWNER_", "_OWNER_():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _QUOTE_RESERVE_(): BigInt {
    let result = super.call(
      "_QUOTE_RESERVE_",
      "_QUOTE_RESERVE_():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try__QUOTE_RESERVE_(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_QUOTE_RESERVE_",
      "_QUOTE_RESERVE_():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _QUOTE_TOKEN_(): Address {
    let result = super.call("_QUOTE_TOKEN_", "_QUOTE_TOKEN_():(address)", []);

    return result[0].toAddress();
  }

  try__QUOTE_TOKEN_(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "_QUOTE_TOKEN_",
      "_QUOTE_TOKEN_():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _SELLING_CLOSE_(): boolean {
    let result = super.call("_SELLING_CLOSE_", "_SELLING_CLOSE_():(bool)", []);

    return result[0].toBoolean();
  }

  try__SELLING_CLOSE_(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "_SELLING_CLOSE_",
      "_SELLING_CLOSE_():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  _TRADE_PERMISSION_(): Address {
    let result = super.call(
      "_TRADE_PERMISSION_",
      "_TRADE_PERMISSION_():(address)",
      []
    );

    return result[0].toAddress();
  }

  try__TRADE_PERMISSION_(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "_TRADE_PERMISSION_",
      "_TRADE_PERMISSION_():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  allowance(owner: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );

    return result[0].toBigInt();
  }

  try_allowance(owner: Address, spender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, amount: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  buyShares(to: Address): DVM__buySharesResult {
    let result = super.call(
      "buyShares",
      "buyShares(address):(uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(to)]
    );

    return new DVM__buySharesResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_buyShares(to: Address): ethereum.CallResult<DVM__buySharesResult> {
    let result = super.tryCall(
      "buyShares",
      "buyShares(address):(uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(to)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DVM__buySharesResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getBaseInput(): BigInt {
    let result = super.call("getBaseInput", "getBaseInput():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getBaseInput(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getBaseInput", "getBaseInput():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMidPrice(): BigInt {
    let result = super.call("getMidPrice", "getMidPrice():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getMidPrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getMidPrice", "getMidPrice():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPMMState(): DVM__getPMMStateResultStateStruct {
    let result = super.call(
      "getPMMState",
      "getPMMState():((uint256,uint256,uint256,uint256,uint256,uint256,uint8))",
      []
    );

    return result[0].toTuple() as DVM__getPMMStateResultStateStruct;
  }

  try_getPMMState(): ethereum.CallResult<DVM__getPMMStateResultStateStruct> {
    let result = super.tryCall(
      "getPMMState",
      "getPMMState():((uint256,uint256,uint256,uint256,uint256,uint256,uint8))",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTuple() as DVM__getPMMStateResultStateStruct
    );
  }

  getPMMStateForCall(): DVM__getPMMStateForCallResult {
    let result = super.call(
      "getPMMStateForCall",
      "getPMMStateForCall():(uint256,uint256,uint256,uint256,uint256,uint256,uint8)",
      []
    );

    return new DVM__getPMMStateForCallResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toI32()
    );
  }

  try_getPMMStateForCall(): ethereum.CallResult<DVM__getPMMStateForCallResult> {
    let result = super.tryCall(
      "getPMMStateForCall",
      "getPMMStateForCall():(uint256,uint256,uint256,uint256,uint256,uint256,uint8)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DVM__getPMMStateForCallResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toI32()
      )
    );
  }

  getQuoteInput(): BigInt {
    let result = super.call("getQuoteInput", "getQuoteInput():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getQuoteInput(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getQuoteInput",
      "getQuoteInput():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getUserFeeRate(user: Address): DVM__getUserFeeRateResult {
    let result = super.call(
      "getUserFeeRate",
      "getUserFeeRate(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(user)]
    );

    return new DVM__getUserFeeRateResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getUserFeeRate(
    user: Address
  ): ethereum.CallResult<DVM__getUserFeeRateResult> {
    let result = super.tryCall(
      "getUserFeeRate",
      "getUserFeeRate(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DVM__getUserFeeRateResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  getUserTradePermission(user: Address): DVM__getUserTradePermissionResult {
    let result = super.call(
      "getUserTradePermission",
      "getUserTradePermission(address):(bool,bool)",
      [ethereum.Value.fromAddress(user)]
    );

    return new DVM__getUserTradePermissionResult(
      result[0].toBoolean(),
      result[1].toBoolean()
    );
  }

  try_getUserTradePermission(
    user: Address
  ): ethereum.CallResult<DVM__getUserTradePermissionResult> {
    let result = super.tryCall(
      "getUserTradePermission",
      "getUserTradePermission(address):(bool,bool)",
      [ethereum.Value.fromAddress(user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DVM__getUserTradePermissionResult(
        value[0].toBoolean(),
        value[1].toBoolean()
      )
    );
  }

  getVaultReserve(): DVM__getVaultReserveResult {
    let result = super.call(
      "getVaultReserve",
      "getVaultReserve():(uint256,uint256)",
      []
    );

    return new DVM__getVaultReserveResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getVaultReserve(): ethereum.CallResult<DVM__getVaultReserveResult> {
    let result = super.tryCall(
      "getVaultReserve",
      "getVaultReserve():(uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DVM__getVaultReserveResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  nonces(param0: Address): BigInt {
    let result = super.call("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_nonces(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  querySellBase(
    trader: Address,
    payBaseAmount: BigInt
  ): DVM__querySellBaseResult {
    let result = super.call(
      "querySellBase",
      "querySellBase(address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(trader),
        ethereum.Value.fromUnsignedBigInt(payBaseAmount)
      ]
    );

    return new DVM__querySellBaseResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_querySellBase(
    trader: Address,
    payBaseAmount: BigInt
  ): ethereum.CallResult<DVM__querySellBaseResult> {
    let result = super.tryCall(
      "querySellBase",
      "querySellBase(address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(trader),
        ethereum.Value.fromUnsignedBigInt(payBaseAmount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DVM__querySellBaseResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  querySellQuote(
    trader: Address,
    payQuoteAmount: BigInt
  ): DVM__querySellQuoteResult {
    let result = super.call(
      "querySellQuote",
      "querySellQuote(address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(trader),
        ethereum.Value.fromUnsignedBigInt(payQuoteAmount)
      ]
    );

    return new DVM__querySellQuoteResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_querySellQuote(
    trader: Address,
    payQuoteAmount: BigInt
  ): ethereum.CallResult<DVM__querySellQuoteResult> {
    let result = super.tryCall(
      "querySellQuote",
      "querySellQuote(address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(trader),
        ethereum.Value.fromUnsignedBigInt(payQuoteAmount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DVM__querySellQuoteResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  sellBase(to: Address): BigInt {
    let result = super.call("sellBase", "sellBase(address):(uint256)", [
      ethereum.Value.fromAddress(to)
    ]);

    return result[0].toBigInt();
  }

  try_sellBase(to: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("sellBase", "sellBase(address):(uint256)", [
      ethereum.Value.fromAddress(to)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  sellQuote(to: Address): BigInt {
    let result = super.call("sellQuote", "sellQuote(address):(uint256)", [
      ethereum.Value.fromAddress(to)
    ]);

    return result[0].toBigInt();
  }

  try_sellQuote(to: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("sellQuote", "sellQuote(address):(uint256)", [
      ethereum.Value.fromAddress(to)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  sellShares(
    shareAmount: BigInt,
    to: Address,
    baseMinAmount: BigInt,
    quoteMinAmount: BigInt,
    data: Bytes,
    deadline: BigInt
  ): DVM__sellSharesResult {
    let result = super.call(
      "sellShares",
      "sellShares(uint256,address,uint256,uint256,bytes,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(shareAmount),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(baseMinAmount),
        ethereum.Value.fromUnsignedBigInt(quoteMinAmount),
        ethereum.Value.fromBytes(data),
        ethereum.Value.fromUnsignedBigInt(deadline)
      ]
    );

    return new DVM__sellSharesResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_sellShares(
    shareAmount: BigInt,
    to: Address,
    baseMinAmount: BigInt,
    quoteMinAmount: BigInt,
    data: Bytes,
    deadline: BigInt
  ): ethereum.CallResult<DVM__sellSharesResult> {
    let result = super.tryCall(
      "sellShares",
      "sellShares(uint256,address,uint256,uint256,bytes,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(shareAmount),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(baseMinAmount),
        ethereum.Value.fromUnsignedBigInt(quoteMinAmount),
        ethereum.Value.fromBytes(data),
        ethereum.Value.fromUnsignedBigInt(deadline)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DVM__sellSharesResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(to: Address, amount: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(to: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(from: Address, to: Address, amount: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    from: Address,
    to: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  addressToShortString(_addr: Address): string {
    let result = super.call(
      "addressToShortString",
      "addressToShortString(address):(string)",
      [ethereum.Value.fromAddress(_addr)]
    );

    return result[0].toString();
  }

  try_addressToShortString(_addr: Address): ethereum.CallResult<string> {
    let result = super.tryCall(
      "addressToShortString",
      "addressToShortString(address):(string)",
      [ethereum.Value.fromAddress(_addr)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  version(): string {
    let result = super.call("version", "version():(string)", []);

    return result[0].toString();
  }

  try_version(): ethereum.CallResult<string> {
    let result = super.tryCall("version", "version():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class BuySharesCall extends ethereum.Call {
  get inputs(): BuySharesCall__Inputs {
    return new BuySharesCall__Inputs(this);
  }

  get outputs(): BuySharesCall__Outputs {
    return new BuySharesCall__Outputs(this);
  }
}

export class BuySharesCall__Inputs {
  _call: BuySharesCall;

  constructor(call: BuySharesCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class BuySharesCall__Outputs {
  _call: BuySharesCall;

  constructor(call: BuySharesCall) {
    this._call = call;
  }

  get shares(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get baseInput(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }

  get quoteInput(): BigInt {
    return this._call.outputValues[2].value.toBigInt();
  }
}

export class ClaimOwnershipCall extends ethereum.Call {
  get inputs(): ClaimOwnershipCall__Inputs {
    return new ClaimOwnershipCall__Inputs(this);
  }

  get outputs(): ClaimOwnershipCall__Outputs {
    return new ClaimOwnershipCall__Outputs(this);
  }
}

export class ClaimOwnershipCall__Inputs {
  _call: ClaimOwnershipCall;

  constructor(call: ClaimOwnershipCall) {
    this._call = call;
  }
}

export class ClaimOwnershipCall__Outputs {
  _call: ClaimOwnershipCall;

  constructor(call: ClaimOwnershipCall) {
    this._call = call;
  }
}

export class FlashLoanCall extends ethereum.Call {
  get inputs(): FlashLoanCall__Inputs {
    return new FlashLoanCall__Inputs(this);
  }

  get outputs(): FlashLoanCall__Outputs {
    return new FlashLoanCall__Outputs(this);
  }
}

export class FlashLoanCall__Inputs {
  _call: FlashLoanCall;

  constructor(call: FlashLoanCall) {
    this._call = call;
  }

  get baseAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get quoteAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get assetTo(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class FlashLoanCall__Outputs {
  _call: FlashLoanCall;

  constructor(call: FlashLoanCall) {
    this._call = call;
  }
}

export class InitOwnerCall extends ethereum.Call {
  get inputs(): InitOwnerCall__Inputs {
    return new InitOwnerCall__Inputs(this);
  }

  get outputs(): InitOwnerCall__Outputs {
    return new InitOwnerCall__Outputs(this);
  }
}

export class InitOwnerCall__Inputs {
  _call: InitOwnerCall;

  constructor(call: InitOwnerCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class InitOwnerCall__Outputs {
  _call: InitOwnerCall;

  constructor(call: InitOwnerCall) {
    this._call = call;
  }
}

export class PermitCall extends ethereum.Call {
  get inputs(): PermitCall__Inputs {
    return new PermitCall__Inputs(this);
  }

  get outputs(): PermitCall__Outputs {
    return new PermitCall__Outputs(this);
  }
}

export class PermitCall__Inputs {
  _call: PermitCall;

  constructor(call: PermitCall) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get spender(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get deadline(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }
}

export class PermitCall__Outputs {
  _call: PermitCall;

  constructor(call: PermitCall) {
    this._call = call;
  }
}

export class SellBaseCall extends ethereum.Call {
  get inputs(): SellBaseCall__Inputs {
    return new SellBaseCall__Inputs(this);
  }

  get outputs(): SellBaseCall__Outputs {
    return new SellBaseCall__Outputs(this);
  }
}

export class SellBaseCall__Inputs {
  _call: SellBaseCall;

  constructor(call: SellBaseCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SellBaseCall__Outputs {
  _call: SellBaseCall;

  constructor(call: SellBaseCall) {
    this._call = call;
  }

  get receiveQuoteAmount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SellQuoteCall extends ethereum.Call {
  get inputs(): SellQuoteCall__Inputs {
    return new SellQuoteCall__Inputs(this);
  }

  get outputs(): SellQuoteCall__Outputs {
    return new SellQuoteCall__Outputs(this);
  }
}

export class SellQuoteCall__Inputs {
  _call: SellQuoteCall;

  constructor(call: SellQuoteCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SellQuoteCall__Outputs {
  _call: SellQuoteCall;

  constructor(call: SellQuoteCall) {
    this._call = call;
  }

  get receiveBaseAmount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SellSharesCall extends ethereum.Call {
  get inputs(): SellSharesCall__Inputs {
    return new SellSharesCall__Inputs(this);
  }

  get outputs(): SellSharesCall__Outputs {
    return new SellSharesCall__Outputs(this);
  }
}

export class SellSharesCall__Inputs {
  _call: SellSharesCall;

  constructor(call: SellSharesCall) {
    this._call = call;
  }

  get shareAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get baseMinAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get quoteMinAmount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get deadline(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class SellSharesCall__Outputs {
  _call: SellSharesCall;

  constructor(call: SellSharesCall) {
    this._call = call;
  }

  get baseAmount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get quoteAmount(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class SetBuyCall extends ethereum.Call {
  get inputs(): SetBuyCall__Inputs {
    return new SetBuyCall__Inputs(this);
  }

  get outputs(): SetBuyCall__Outputs {
    return new SetBuyCall__Outputs(this);
  }
}

export class SetBuyCall__Inputs {
  _call: SetBuyCall;

  constructor(call: SetBuyCall) {
    this._call = call;
  }

  get open(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetBuyCall__Outputs {
  _call: SetBuyCall;

  constructor(call: SetBuyCall) {
    this._call = call;
  }
}

export class SetGasPriceSourceCall extends ethereum.Call {
  get inputs(): SetGasPriceSourceCall__Inputs {
    return new SetGasPriceSourceCall__Inputs(this);
  }

  get outputs(): SetGasPriceSourceCall__Outputs {
    return new SetGasPriceSourceCall__Outputs(this);
  }
}

export class SetGasPriceSourceCall__Inputs {
  _call: SetGasPriceSourceCall;

  constructor(call: SetGasPriceSourceCall) {
    this._call = call;
  }

  get newGasPriceLimitSource(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetGasPriceSourceCall__Outputs {
  _call: SetGasPriceSourceCall;

  constructor(call: SetGasPriceSourceCall) {
    this._call = call;
  }
}

export class SetLpFeeRateModelCall extends ethereum.Call {
  get inputs(): SetLpFeeRateModelCall__Inputs {
    return new SetLpFeeRateModelCall__Inputs(this);
  }

  get outputs(): SetLpFeeRateModelCall__Outputs {
    return new SetLpFeeRateModelCall__Outputs(this);
  }
}

export class SetLpFeeRateModelCall__Inputs {
  _call: SetLpFeeRateModelCall;

  constructor(call: SetLpFeeRateModelCall) {
    this._call = call;
  }

  get newLpFeeRateModel(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetLpFeeRateModelCall__Outputs {
  _call: SetLpFeeRateModelCall;

  constructor(call: SetLpFeeRateModelCall) {
    this._call = call;
  }
}

export class SetLpFeeRateValueCall extends ethereum.Call {
  get inputs(): SetLpFeeRateValueCall__Inputs {
    return new SetLpFeeRateValueCall__Inputs(this);
  }

  get outputs(): SetLpFeeRateValueCall__Outputs {
    return new SetLpFeeRateValueCall__Outputs(this);
  }
}

export class SetLpFeeRateValueCall__Inputs {
  _call: SetLpFeeRateValueCall;

  constructor(call: SetLpFeeRateValueCall) {
    this._call = call;
  }

  get newLpFeeRate(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetLpFeeRateValueCall__Outputs {
  _call: SetLpFeeRateValueCall;

  constructor(call: SetLpFeeRateValueCall) {
    this._call = call;
  }
}

export class SetMaintainerCall extends ethereum.Call {
  get inputs(): SetMaintainerCall__Inputs {
    return new SetMaintainerCall__Inputs(this);
  }

  get outputs(): SetMaintainerCall__Outputs {
    return new SetMaintainerCall__Outputs(this);
  }
}

export class SetMaintainerCall__Inputs {
  _call: SetMaintainerCall;

  constructor(call: SetMaintainerCall) {
    this._call = call;
  }

  get newMaintainer(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetMaintainerCall__Outputs {
  _call: SetMaintainerCall;

  constructor(call: SetMaintainerCall) {
    this._call = call;
  }
}

export class SetMtFeeRateModelCall extends ethereum.Call {
  get inputs(): SetMtFeeRateModelCall__Inputs {
    return new SetMtFeeRateModelCall__Inputs(this);
  }

  get outputs(): SetMtFeeRateModelCall__Outputs {
    return new SetMtFeeRateModelCall__Outputs(this);
  }
}

export class SetMtFeeRateModelCall__Inputs {
  _call: SetMtFeeRateModelCall;

  constructor(call: SetMtFeeRateModelCall) {
    this._call = call;
  }

  get newMtFeeRateModel(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetMtFeeRateModelCall__Outputs {
  _call: SetMtFeeRateModelCall;

  constructor(call: SetMtFeeRateModelCall) {
    this._call = call;
  }
}

export class SetMtFeeRateValueCall extends ethereum.Call {
  get inputs(): SetMtFeeRateValueCall__Inputs {
    return new SetMtFeeRateValueCall__Inputs(this);
  }

  get outputs(): SetMtFeeRateValueCall__Outputs {
    return new SetMtFeeRateValueCall__Outputs(this);
  }
}

export class SetMtFeeRateValueCall__Inputs {
  _call: SetMtFeeRateValueCall;

  constructor(call: SetMtFeeRateValueCall) {
    this._call = call;
  }

  get newMtFeeRate(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMtFeeRateValueCall__Outputs {
  _call: SetMtFeeRateValueCall;

  constructor(call: SetMtFeeRateValueCall) {
    this._call = call;
  }
}

export class SetSellCall extends ethereum.Call {
  get inputs(): SetSellCall__Inputs {
    return new SetSellCall__Inputs(this);
  }

  get outputs(): SetSellCall__Outputs {
    return new SetSellCall__Outputs(this);
  }
}

export class SetSellCall__Inputs {
  _call: SetSellCall;

  constructor(call: SetSellCall) {
    this._call = call;
  }

  get open(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetSellCall__Outputs {
  _call: SetSellCall;

  constructor(call: SetSellCall) {
    this._call = call;
  }
}

export class SetTradePermissionManagerCall extends ethereum.Call {
  get inputs(): SetTradePermissionManagerCall__Inputs {
    return new SetTradePermissionManagerCall__Inputs(this);
  }

  get outputs(): SetTradePermissionManagerCall__Outputs {
    return new SetTradePermissionManagerCall__Outputs(this);
  }
}

export class SetTradePermissionManagerCall__Inputs {
  _call: SetTradePermissionManagerCall;

  constructor(call: SetTradePermissionManagerCall) {
    this._call = call;
  }

  get newTradePermissionManager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetTradePermissionManagerCall__Outputs {
  _call: SetTradePermissionManagerCall;

  constructor(call: SetTradePermissionManagerCall) {
    this._call = call;
  }
}

export class SyncCall extends ethereum.Call {
  get inputs(): SyncCall__Inputs {
    return new SyncCall__Inputs(this);
  }

  get outputs(): SyncCall__Outputs {
    return new SyncCall__Outputs(this);
  }
}

export class SyncCall__Inputs {
  _call: SyncCall;

  constructor(call: SyncCall) {
    this._call = call;
  }
}

export class SyncCall__Outputs {
  _call: SyncCall;

  constructor(call: SyncCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class InitCall extends ethereum.Call {
  get inputs(): InitCall__Inputs {
    return new InitCall__Inputs(this);
  }

  get outputs(): InitCall__Outputs {
    return new InitCall__Outputs(this);
  }
}

export class InitCall__Inputs {
  _call: InitCall;

  constructor(call: InitCall) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get maintainer(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get baseTokenAddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get quoteTokenAddress(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get lpFeeRateModel(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get mtFeeRateModel(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get tradePermissionManager(): Address {
    return this._call.inputValues[6].value.toAddress();
  }

  get gasPriceSource(): Address {
    return this._call.inputValues[7].value.toAddress();
  }

  get i(): BigInt {
    return this._call.inputValues[8].value.toBigInt();
  }

  get k(): BigInt {
    return this._call.inputValues[9].value.toBigInt();
  }
}

export class InitCall__Outputs {
  _call: InitCall;

  constructor(call: InitCall) {
    this._call = call;
  }
}
