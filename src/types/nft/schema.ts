// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class NftCollateralVault extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save NftCollateralVault entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save NftCollateralVault entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("NftCollateralVault", id.toString(), this);
  }

  static load(id: string): NftCollateralVault | null {
    return store.get("NftCollateralVault", id) as NftCollateralVault | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get creator(): string {
    let value = this.get("creator");
    return value.toString();
  }

  set creator(value: string) {
    this.set("creator", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get baseURI(): string {
    let value = this.get("baseURI");
    return value.toString();
  }

  set baseURI(value: string) {
    this.set("baseURI", Value.fromString(value));
  }

  get vaultNfts(): Array<string> | null {
    let value = this.get("vaultNfts");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set vaultNfts(value: Array<string> | null) {
    if (value === null) {
      this.unset("vaultNfts");
    } else {
      this.set("vaultNfts", Value.fromStringArray(value as Array<string>));
    }
  }
}

export class Nft extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Nft entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Nft entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Nft", id.toString(), this);
  }

  static load(id: string): Nft | null {
    return store.get("Nft", id) as Nft | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get type(): string | null {
    let value = this.get("type");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set type(value: string | null) {
    if (value === null) {
      this.unset("type");
    } else {
      this.set("type", Value.fromString(value as string));
    }
  }

  get creator(): string | null {
    let value = this.get("creator");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set creator(value: string | null) {
    if (value === null) {
      this.unset("creator");
    } else {
      this.set("creator", Value.fromString(value as string));
    }
  }

  get baseUrl(): string | null {
    let value = this.get("baseUrl");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set baseUrl(value: string | null) {
    if (value === null) {
      this.unset("baseUrl");
    } else {
      this.set("baseUrl", Value.fromString(value as string));
    }
  }
}

export class VaultNft extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save VaultNft entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save VaultNft entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("VaultNft", id.toString(), this);
  }

  static load(id: string): VaultNft | null {
    return store.get("VaultNft", id) as VaultNft | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get vault(): string {
    let value = this.get("vault");
    return value.toString();
  }

  set vault(value: string) {
    this.set("vault", Value.fromString(value));
  }

  get nftAddress(): string {
    let value = this.get("nftAddress");
    return value.toString();
  }

  set nftAddress(value: string) {
    this.set("nftAddress", Value.fromString(value));
  }

  get nft(): string | null {
    let value = this.get("nft");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set nft(value: string | null) {
    if (value === null) {
      this.unset("nft");
    } else {
      this.set("nft", Value.fromString(value as string));
    }
  }

  get tokenID(): BigInt {
    let value = this.get("tokenID");
    return value.toBigInt();
  }

  set tokenID(value: BigInt) {
    this.set("tokenID", Value.fromBigInt(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}

export class Fragment extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Fragment entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Fragment entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Fragment", id.toString(), this);
  }

  static load(id: string): Fragment | null {
    return store.get("Fragment", id) as Fragment | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get vault(): string {
    let value = this.get("vault");
    return value.toString();
  }

  set vault(value: string) {
    this.set("vault", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get decimals(): BigInt {
    let value = this.get("decimals");
    return value.toBigInt();
  }

  set decimals(value: BigInt) {
    this.set("decimals", Value.fromBigInt(value));
  }

  get totalSupply(): BigInt {
    let value = this.get("totalSupply");
    return value.toBigInt();
  }

  set totalSupply(value: BigInt) {
    this.set("totalSupply", Value.fromBigInt(value));
  }

  get isBuyOut(): boolean {
    let value = this.get("isBuyOut");
    return value.toBoolean();
  }

  set isBuyOut(value: boolean) {
    this.set("isBuyOut", Value.fromBoolean(value));
  }

  get dvm(): string {
    let value = this.get("dvm");
    return value.toString();
  }

  set dvm(value: string) {
    this.set("dvm", Value.fromString(value));
  }

  get feeDistributor(): string | null {
    let value = this.get("feeDistributor");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set feeDistributor(value: string | null) {
    if (value === null) {
      this.unset("feeDistributor");
    } else {
      this.set("feeDistributor", Value.fromString(value as string));
    }
  }

  get initialized(): boolean {
    let value = this.get("initialized");
    return value.toBoolean();
  }

  set initialized(value: boolean) {
    this.set("initialized", Value.fromBoolean(value));
  }

  get quote(): string {
    let value = this.get("quote");
    return value.toString();
  }

  set quote(value: string) {
    this.set("quote", Value.fromString(value));
  }

  get vaultPreOwner(): string {
    let value = this.get("vaultPreOwner");
    return value.toString();
  }

  set vaultPreOwner(value: string) {
    this.set("vaultPreOwner", Value.fromString(value));
  }

  get buyoutTimestamp(): BigInt {
    let value = this.get("buyoutTimestamp");
    return value.toBigInt();
  }

  set buyoutTimestamp(value: BigInt) {
    this.set("buyoutTimestamp", Value.fromBigInt(value));
  }
}
