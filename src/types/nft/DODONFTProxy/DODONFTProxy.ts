// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Buyout extends ethereum.Event {
  get params(): Buyout__Params {
    return new Buyout__Params(this);
  }
}

export class Buyout__Params {
  _event: Buyout;

  constructor(event: Buyout) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get fragment(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ChangeFeeTemplate extends ethereum.Event {
  get params(): ChangeFeeTemplate__Params {
    return new ChangeFeeTemplate__Params(this);
  }
}

export class ChangeFeeTemplate__Params {
  _event: ChangeFeeTemplate;

  constructor(event: ChangeFeeTemplate) {
    this._event = event;
  }

  get newFeeTemplate(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class ChangeFragTemplate extends ethereum.Event {
  get params(): ChangeFragTemplate__Params {
    return new ChangeFragTemplate__Params(this);
  }
}

export class ChangeFragTemplate__Params {
  _event: ChangeFragTemplate;

  constructor(event: ChangeFragTemplate) {
    this._event = event;
  }

  get newFragTemplate(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class ChangeVaultTemplate extends ethereum.Event {
  get params(): ChangeVaultTemplate__Params {
    return new ChangeVaultTemplate__Params(this);
  }
}

export class ChangeVaultTemplate__Params {
  _event: ChangeVaultTemplate;

  constructor(event: ChangeVaultTemplate) {
    this._event = event;
  }

  get newVaultTemplate(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class CreateFragment extends ethereum.Event {
  get params(): CreateFragment__Params {
    return new CreateFragment__Params(this);
  }
}

export class CreateFragment__Params {
  _event: CreateFragment;

  constructor(event: CreateFragment) {
    this._event = event;
  }

  get vault(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get fragment(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get dvm(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get feeDistributor(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class CreateNFTCollateralVault extends ethereum.Event {
  get params(): CreateNFTCollateralVault__Params {
    return new CreateNFTCollateralVault__Params(this);
  }
}

export class CreateNFTCollateralVault__Params {
  _event: CreateNFTCollateralVault;

  constructor(event: CreateNFTCollateralVault) {
    this._event = event;
  }

  get creator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get vault(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get name(): string {
    return this._event.parameters[2].value.toString();
  }

  get baseURI(): string {
    return this._event.parameters[3].value.toString();
  }
}

export class OwnershipTransferPrepared extends ethereum.Event {
  get params(): OwnershipTransferPrepared__Params {
    return new OwnershipTransferPrepared__Params(this);
  }
}

export class OwnershipTransferPrepared__Params {
  _event: OwnershipTransferPrepared;

  constructor(event: OwnershipTransferPrepared) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Stake extends ethereum.Event {
  get params(): Stake__Params {
    return new Stake__Params(this);
  }
}

export class Stake__Params {
  _event: Stake;

  constructor(event: Stake) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get feeDistributor(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class DODONFTProxy__createFragmentResult {
  value0: Address;
  value1: Address;
  value2: Address;

  constructor(value0: Address, value1: Address, value2: Address) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    return map;
  }
}

export class DODONFTProxy extends ethereum.SmartContract {
  static bind(address: Address): DODONFTProxy {
    return new DODONFTProxy("DODONFTProxy", address);
  }

  _CLONE_FACTORY_(): Address {
    let result = super.call(
      "_CLONE_FACTORY_",
      "_CLONE_FACTORY_():(address)",
      []
    );

    return result[0].toAddress();
  }

  try__CLONE_FACTORY_(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "_CLONE_FACTORY_",
      "_CLONE_FACTORY_():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _DODO_APPROVE_PROXY_(): Address {
    let result = super.call(
      "_DODO_APPROVE_PROXY_",
      "_DODO_APPROVE_PROXY_():(address)",
      []
    );

    return result[0].toAddress();
  }

  try__DODO_APPROVE_PROXY_(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "_DODO_APPROVE_PROXY_",
      "_DODO_APPROVE_PROXY_():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _DVM_FACTORY_(): Address {
    let result = super.call("_DVM_FACTORY_", "_DVM_FACTORY_():(address)", []);

    return result[0].toAddress();
  }

  try__DVM_FACTORY_(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "_DVM_FACTORY_",
      "_DVM_FACTORY_():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _FEE_TEMPLATE_(): Address {
    let result = super.call("_FEE_TEMPLATE_", "_FEE_TEMPLATE_():(address)", []);

    return result[0].toAddress();
  }

  try__FEE_TEMPLATE_(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "_FEE_TEMPLATE_",
      "_FEE_TEMPLATE_():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _FRAG_TEMPLATE_(): Address {
    let result = super.call(
      "_FRAG_TEMPLATE_",
      "_FRAG_TEMPLATE_():(address)",
      []
    );

    return result[0].toAddress();
  }

  try__FRAG_TEMPLATE_(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "_FRAG_TEMPLATE_",
      "_FRAG_TEMPLATE_():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _NEW_OWNER_(): Address {
    let result = super.call("_NEW_OWNER_", "_NEW_OWNER_():(address)", []);

    return result[0].toAddress();
  }

  try__NEW_OWNER_(): ethereum.CallResult<Address> {
    let result = super.tryCall("_NEW_OWNER_", "_NEW_OWNER_():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _NFT_REGISTY_(): Address {
    let result = super.call("_NFT_REGISTY_", "_NFT_REGISTY_():(address)", []);

    return result[0].toAddress();
  }

  try__NFT_REGISTY_(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "_NFT_REGISTY_",
      "_NFT_REGISTY_():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _OWNER_(): Address {
    let result = super.call("_OWNER_", "_OWNER_():(address)", []);

    return result[0].toAddress();
  }

  try__OWNER_(): ethereum.CallResult<Address> {
    let result = super.tryCall("_OWNER_", "_OWNER_():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _VAULT_TEMPLATE_(): Address {
    let result = super.call(
      "_VAULT_TEMPLATE_",
      "_VAULT_TEMPLATE_():(address)",
      []
    );

    return result[0].toAddress();
  }

  try__VAULT_TEMPLATE_(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "_VAULT_TEMPLATE_",
      "_VAULT_TEMPLATE_():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _WETH_(): Address {
    let result = super.call("_WETH_", "_WETH_():(address)", []);

    return result[0].toAddress();
  }

  try__WETH_(): ethereum.CallResult<Address> {
    let result = super.tryCall("_WETH_", "_WETH_():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  createNFTCollateralVault(name: string, baseURI: string): Address {
    let result = super.call(
      "createNFTCollateralVault",
      "createNFTCollateralVault(string,string):(address)",
      [ethereum.Value.fromString(name), ethereum.Value.fromString(baseURI)]
    );

    return result[0].toAddress();
  }

  try_createNFTCollateralVault(
    name: string,
    baseURI: string
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "createNFTCollateralVault",
      "createNFTCollateralVault(string,string):(address)",
      [ethereum.Value.fromString(name), ethereum.Value.fromString(baseURI)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  createFragment(
    quoteToken: Address,
    collateralVault: Address,
    vaultPreOwner: Address,
    stakeToken: Address,
    dvmParams: Array<BigInt>,
    fragParams: Array<BigInt>,
    isOpenBuyout: boolean
  ): DODONFTProxy__createFragmentResult {
    let result = super.call(
      "createFragment",
      "createFragment(address,address,address,address,uint256[],uint256[],bool):(address,address,address)",
      [
        ethereum.Value.fromAddress(quoteToken),
        ethereum.Value.fromAddress(collateralVault),
        ethereum.Value.fromAddress(vaultPreOwner),
        ethereum.Value.fromAddress(stakeToken),
        ethereum.Value.fromUnsignedBigIntArray(dvmParams),
        ethereum.Value.fromUnsignedBigIntArray(fragParams),
        ethereum.Value.fromBoolean(isOpenBuyout)
      ]
    );

    return new DODONFTProxy__createFragmentResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toAddress()
    );
  }

  try_createFragment(
    quoteToken: Address,
    collateralVault: Address,
    vaultPreOwner: Address,
    stakeToken: Address,
    dvmParams: Array<BigInt>,
    fragParams: Array<BigInt>,
    isOpenBuyout: boolean
  ): ethereum.CallResult<DODONFTProxy__createFragmentResult> {
    let result = super.tryCall(
      "createFragment",
      "createFragment(address,address,address,address,uint256[],uint256[],bool):(address,address,address)",
      [
        ethereum.Value.fromAddress(quoteToken),
        ethereum.Value.fromAddress(collateralVault),
        ethereum.Value.fromAddress(vaultPreOwner),
        ethereum.Value.fromAddress(stakeToken),
        ethereum.Value.fromUnsignedBigIntArray(dvmParams),
        ethereum.Value.fromUnsignedBigIntArray(fragParams),
        ethereum.Value.fromBoolean(isOpenBuyout)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DODONFTProxy__createFragmentResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toAddress()
      )
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get cloneFactory(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get weth(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get dodoApproveProxy(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get dvmFactory(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get vaultTemplate(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get fragTemplate(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get feeTemplate(): Address {
    return this._call.inputValues[6].value.toAddress();
  }

  get nftRegistry(): Address {
    return this._call.inputValues[7].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DefaultCall extends ethereum.Call {
  get inputs(): DefaultCall__Inputs {
    return new DefaultCall__Inputs(this);
  }

  get outputs(): DefaultCall__Outputs {
    return new DefaultCall__Outputs(this);
  }
}

export class DefaultCall__Inputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class DefaultCall__Outputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class ClaimOwnershipCall extends ethereum.Call {
  get inputs(): ClaimOwnershipCall__Inputs {
    return new ClaimOwnershipCall__Inputs(this);
  }

  get outputs(): ClaimOwnershipCall__Outputs {
    return new ClaimOwnershipCall__Outputs(this);
  }
}

export class ClaimOwnershipCall__Inputs {
  _call: ClaimOwnershipCall;

  constructor(call: ClaimOwnershipCall) {
    this._call = call;
  }
}

export class ClaimOwnershipCall__Outputs {
  _call: ClaimOwnershipCall;

  constructor(call: ClaimOwnershipCall) {
    this._call = call;
  }
}

export class InitOwnerCall extends ethereum.Call {
  get inputs(): InitOwnerCall__Inputs {
    return new InitOwnerCall__Inputs(this);
  }

  get outputs(): InitOwnerCall__Outputs {
    return new InitOwnerCall__Outputs(this);
  }
}

export class InitOwnerCall__Inputs {
  _call: InitOwnerCall;

  constructor(call: InitOwnerCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class InitOwnerCall__Outputs {
  _call: InitOwnerCall;

  constructor(call: InitOwnerCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class CreateNFTCollateralVaultCall extends ethereum.Call {
  get inputs(): CreateNFTCollateralVaultCall__Inputs {
    return new CreateNFTCollateralVaultCall__Inputs(this);
  }

  get outputs(): CreateNFTCollateralVaultCall__Outputs {
    return new CreateNFTCollateralVaultCall__Outputs(this);
  }
}

export class CreateNFTCollateralVaultCall__Inputs {
  _call: CreateNFTCollateralVaultCall;

  constructor(call: CreateNFTCollateralVaultCall) {
    this._call = call;
  }

  get name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get baseURI(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class CreateNFTCollateralVaultCall__Outputs {
  _call: CreateNFTCollateralVaultCall;

  constructor(call: CreateNFTCollateralVaultCall) {
    this._call = call;
  }

  get newVault(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class CreateFragmentCall extends ethereum.Call {
  get inputs(): CreateFragmentCall__Inputs {
    return new CreateFragmentCall__Inputs(this);
  }

  get outputs(): CreateFragmentCall__Outputs {
    return new CreateFragmentCall__Outputs(this);
  }
}

export class CreateFragmentCall__Inputs {
  _call: CreateFragmentCall;

  constructor(call: CreateFragmentCall) {
    this._call = call;
  }

  get quoteToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get collateralVault(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get vaultPreOwner(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get stakeToken(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get dvmParams(): Array<BigInt> {
    return this._call.inputValues[4].value.toBigIntArray();
  }

  get fragParams(): Array<BigInt> {
    return this._call.inputValues[5].value.toBigIntArray();
  }

  get isOpenBuyout(): boolean {
    return this._call.inputValues[6].value.toBoolean();
  }
}

export class CreateFragmentCall__Outputs {
  _call: CreateFragmentCall;

  constructor(call: CreateFragmentCall) {
    this._call = call;
  }

  get newFragment(): Address {
    return this._call.outputValues[0].value.toAddress();
  }

  get newDvm(): Address {
    return this._call.outputValues[1].value.toAddress();
  }

  get newFeeDistributor(): Address {
    return this._call.outputValues[2].value.toAddress();
  }
}

export class BuyoutCall extends ethereum.Call {
  get inputs(): BuyoutCall__Inputs {
    return new BuyoutCall__Inputs(this);
  }

  get outputs(): BuyoutCall__Outputs {
    return new BuyoutCall__Outputs(this);
  }
}

export class BuyoutCall__Inputs {
  _call: BuyoutCall;

  constructor(call: BuyoutCall) {
    this._call = call;
  }

  get fragment(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get quoteAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get flag(): i32 {
    return this._call.inputValues[2].value.toI32();
  }
}

export class BuyoutCall__Outputs {
  _call: BuyoutCall;

  constructor(call: BuyoutCall) {
    this._call = call;
  }
}

export class StakeToFeeDistributorCall extends ethereum.Call {
  get inputs(): StakeToFeeDistributorCall__Inputs {
    return new StakeToFeeDistributorCall__Inputs(this);
  }

  get outputs(): StakeToFeeDistributorCall__Outputs {
    return new StakeToFeeDistributorCall__Outputs(this);
  }
}

export class StakeToFeeDistributorCall__Inputs {
  _call: StakeToFeeDistributorCall;

  constructor(call: StakeToFeeDistributorCall) {
    this._call = call;
  }

  get feeDistributor(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get stakeAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get flag(): i32 {
    return this._call.inputValues[2].value.toI32();
  }
}

export class StakeToFeeDistributorCall__Outputs {
  _call: StakeToFeeDistributorCall;

  constructor(call: StakeToFeeDistributorCall) {
    this._call = call;
  }
}

export class UpdateVaultTemplateCall extends ethereum.Call {
  get inputs(): UpdateVaultTemplateCall__Inputs {
    return new UpdateVaultTemplateCall__Inputs(this);
  }

  get outputs(): UpdateVaultTemplateCall__Outputs {
    return new UpdateVaultTemplateCall__Outputs(this);
  }
}

export class UpdateVaultTemplateCall__Inputs {
  _call: UpdateVaultTemplateCall;

  constructor(call: UpdateVaultTemplateCall) {
    this._call = call;
  }

  get newVaultTemplate(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateVaultTemplateCall__Outputs {
  _call: UpdateVaultTemplateCall;

  constructor(call: UpdateVaultTemplateCall) {
    this._call = call;
  }
}

export class UpdateFragTemplateCall extends ethereum.Call {
  get inputs(): UpdateFragTemplateCall__Inputs {
    return new UpdateFragTemplateCall__Inputs(this);
  }

  get outputs(): UpdateFragTemplateCall__Outputs {
    return new UpdateFragTemplateCall__Outputs(this);
  }
}

export class UpdateFragTemplateCall__Inputs {
  _call: UpdateFragTemplateCall;

  constructor(call: UpdateFragTemplateCall) {
    this._call = call;
  }

  get newFragTemplate(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateFragTemplateCall__Outputs {
  _call: UpdateFragTemplateCall;

  constructor(call: UpdateFragTemplateCall) {
    this._call = call;
  }
}

export class UpdateFeeTemplateCall extends ethereum.Call {
  get inputs(): UpdateFeeTemplateCall__Inputs {
    return new UpdateFeeTemplateCall__Inputs(this);
  }

  get outputs(): UpdateFeeTemplateCall__Outputs {
    return new UpdateFeeTemplateCall__Outputs(this);
  }
}

export class UpdateFeeTemplateCall__Inputs {
  _call: UpdateFeeTemplateCall;

  constructor(call: UpdateFeeTemplateCall) {
    this._call = call;
  }

  get newFeeTemplate(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateFeeTemplateCall__Outputs {
  _call: UpdateFeeTemplateCall;

  constructor(call: UpdateFeeTemplateCall) {
    this._call = call;
  }
}
