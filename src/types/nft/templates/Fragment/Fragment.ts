// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AddNftToken extends ethereum.Event {
  get params(): AddNftToken__Params {
    return new AddNftToken__Params(this);
  }
}

export class AddNftToken__Params {
  _event: AddNftToken;

  constructor(event: AddNftToken) {
    this._event = event;
  }

  get nftContract(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Buyout extends ethereum.Event {
  get params(): Buyout__Params {
    return new Buyout__Params(this);
  }
}

export class Buyout__Params {
  _event: Buyout;

  constructor(event: Buyout) {
    this._event = event;
  }

  get newOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class CreateFragment extends ethereum.Event {
  get params(): CreateFragment__Params {
    return new CreateFragment__Params(this);
  }
}

export class CreateFragment__Params {
  _event: CreateFragment;

  constructor(event: CreateFragment) {
    this._event = event;
  }
}

export class InitInfo extends ethereum.Event {
  get params(): InitInfo__Params {
    return new InitInfo__Params(this);
  }
}

export class InitInfo__Params {
  _event: InitInfo;

  constructor(event: InitInfo) {
    this._event = event;
  }

  get vault(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get name(): string {
    return this._event.parameters[1].value.toString();
  }

  get baseURI(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class Redeem extends ethereum.Event {
  get params(): Redeem__Params {
    return new Redeem__Params(this);
  }
}

export class Redeem__Params {
  _event: Redeem;

  constructor(event: Redeem) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get baseAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get quoteAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class RemoveNftToken extends ethereum.Event {
  get params(): RemoveNftToken__Params {
    return new RemoveNftToken__Params(this);
  }
}

export class RemoveNftToken__Params {
  _event: RemoveNftToken;

  constructor(event: RemoveNftToken) {
    this._event = event;
  }

  get nftContract(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Fragment extends ethereum.SmartContract {
  static bind(address: Address): Fragment {
    return new Fragment("Fragment", address);
  }

  _BUYOUT_PRICE_(): BigInt {
    let result = super.call("_BUYOUT_PRICE_", "_BUYOUT_PRICE_():(uint256)", []);

    return result[0].toBigInt();
  }

  try__BUYOUT_PRICE_(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_BUYOUT_PRICE_",
      "_BUYOUT_PRICE_():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _BUYOUT_TIMESTAMP_(): BigInt {
    let result = super.call(
      "_BUYOUT_TIMESTAMP_",
      "_BUYOUT_TIMESTAMP_():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try__BUYOUT_TIMESTAMP_(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_BUYOUT_TIMESTAMP_",
      "_BUYOUT_TIMESTAMP_():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _COLLATERAL_VAULT_(): Address {
    let result = super.call(
      "_COLLATERAL_VAULT_",
      "_COLLATERAL_VAULT_():(address)",
      []
    );

    return result[0].toAddress();
  }

  try__COLLATERAL_VAULT_(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "_COLLATERAL_VAULT_",
      "_COLLATERAL_VAULT_():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _DVM_(): Address {
    let result = super.call("_DVM_", "_DVM_():(address)", []);

    return result[0].toAddress();
  }

  try__DVM_(): ethereum.CallResult<Address> {
    let result = super.tryCall("_DVM_", "_DVM_():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _IS_BUYOUT_(): boolean {
    let result = super.call("_IS_BUYOUT_", "_IS_BUYOUT_():(bool)", []);

    return result[0].toBoolean();
  }

  try__IS_BUYOUT_(): ethereum.CallResult<boolean> {
    let result = super.tryCall("_IS_BUYOUT_", "_IS_BUYOUT_():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  _IS_OPEN_BUYOUT_(): boolean {
    let result = super.call(
      "_IS_OPEN_BUYOUT_",
      "_IS_OPEN_BUYOUT_():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try__IS_OPEN_BUYOUT_(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "_IS_OPEN_BUYOUT_",
      "_IS_OPEN_BUYOUT_():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  _QUOTE_(): Address {
    let result = super.call("_QUOTE_", "_QUOTE_():(address)", []);

    return result[0].toAddress();
  }

  try__QUOTE_(): ethereum.CallResult<Address> {
    let result = super.tryCall("_QUOTE_", "_QUOTE_():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _VAULT_PRE_OWNER_(): Address {
    let result = super.call(
      "_VAULT_PRE_OWNER_",
      "_VAULT_PRE_OWNER_():(address)",
      []
    );

    return result[0].toAddress();
  }

  try__VAULT_PRE_OWNER_(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "_VAULT_PRE_OWNER_",
      "_VAULT_PRE_OWNER_():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  allowance(owner: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );

    return result[0].toBigInt();
  }

  try_allowance(owner: Address, spender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, amount: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  decimals(): BigInt {
    let result = super.call("decimals", "decimals():(uint256)", []);

    return result[0].toBigInt();
  }

  try_decimals(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("decimals", "decimals():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  initialized(): boolean {
    let result = super.call("initialized", "initialized():(bool)", []);

    return result[0].toBoolean();
  }

  try_initialized(): ethereum.CallResult<boolean> {
    let result = super.tryCall("initialized", "initialized():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(to: Address, amount: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(to: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(from: Address, to: Address, amount: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    from: Address,
    to: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getBuyoutRequirement(): BigInt {
    let result = super.call(
      "getBuyoutRequirement",
      "getBuyoutRequirement():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getBuyoutRequirement(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBuyoutRequirement",
      "getBuyoutRequirement():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class InitCall extends ethereum.Call {
  get inputs(): InitCall__Inputs {
    return new InitCall__Inputs(this);
  }

  get outputs(): InitCall__Outputs {
    return new InitCall__Outputs(this);
  }
}

export class InitCall__Inputs {
  _call: InitCall;

  constructor(call: InitCall) {
    this._call = call;
  }

  get _creator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _totalSupply(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _name(): string {
    return this._call.inputValues[2].value.toString();
  }

  get _symbol(): string {
    return this._call.inputValues[3].value.toString();
  }

  get _decimals(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class InitCall__Outputs {
  _call: InitCall;

  constructor(call: InitCall) {
    this._call = call;
  }
}

export class Init1Call extends ethereum.Call {
  get inputs(): Init1Call__Inputs {
    return new Init1Call__Inputs(this);
  }

  get outputs(): Init1Call__Outputs {
    return new Init1Call__Outputs(this);
  }
}

export class Init1Call__Inputs {
  _call: Init1Call;

  constructor(call: Init1Call) {
    this._call = call;
  }

  get dvm(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get vaultPreOwner(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get collateralVault(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get totalSupply(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get ownerRatio(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get buyoutTimestamp(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get isOpenBuyout(): boolean {
    return this._call.inputValues[6].value.toBoolean();
  }
}

export class Init1Call__Outputs {
  _call: Init1Call;

  constructor(call: Init1Call) {
    this._call = call;
  }
}

export class BuyoutCall extends ethereum.Call {
  get inputs(): BuyoutCall__Inputs {
    return new BuyoutCall__Inputs(this);
  }

  get outputs(): BuyoutCall__Outputs {
    return new BuyoutCall__Outputs(this);
  }
}

export class BuyoutCall__Inputs {
  _call: BuyoutCall;

  constructor(call: BuyoutCall) {
    this._call = call;
  }

  get newVaultOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class BuyoutCall__Outputs {
  _call: BuyoutCall;

  constructor(call: BuyoutCall) {
    this._call = call;
  }
}

export class RedeemCall extends ethereum.Call {
  get inputs(): RedeemCall__Inputs {
    return new RedeemCall__Inputs(this);
  }

  get outputs(): RedeemCall__Outputs {
    return new RedeemCall__Outputs(this);
  }
}

export class RedeemCall__Inputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class RedeemCall__Outputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }
}
