// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class NewERC20 extends ethereum.Event {
  get params(): NewERC20__Params {
    return new NewERC20__Params(this);
  }
}

export class NewERC20__Params {
  _event: NewERC20;

  constructor(event: NewERC20) {
    this._event = event;
  }

  get erc20(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get creator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get isMintable(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class ERC20Factory extends ethereum.SmartContract {
  static bind(address: Address): ERC20Factory {
    return new ERC20Factory("ERC20Factory", address);
  }

  _CLONE_FACTORY_(): Address {
    let result = super.call(
      "_CLONE_FACTORY_",
      "_CLONE_FACTORY_():(address)",
      []
    );

    return result[0].toAddress();
  }

  try__CLONE_FACTORY_(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "_CLONE_FACTORY_",
      "_CLONE_FACTORY_():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _ERC20_TEMPLATE_(): Address {
    let result = super.call(
      "_ERC20_TEMPLATE_",
      "_ERC20_TEMPLATE_():(address)",
      []
    );

    return result[0].toAddress();
  }

  try__ERC20_TEMPLATE_(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "_ERC20_TEMPLATE_",
      "_ERC20_TEMPLATE_():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _MINTABLE_ERC20_TEMPLATE_(): Address {
    let result = super.call(
      "_MINTABLE_ERC20_TEMPLATE_",
      "_MINTABLE_ERC20_TEMPLATE_():(address)",
      []
    );

    return result[0].toAddress();
  }

  try__MINTABLE_ERC20_TEMPLATE_(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "_MINTABLE_ERC20_TEMPLATE_",
      "_MINTABLE_ERC20_TEMPLATE_():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  createStdERC20(
    totalSupply: BigInt,
    name: string,
    symbol: string,
    decimals: BigInt
  ): Address {
    let result = super.call(
      "createStdERC20",
      "createStdERC20(uint256,string,string,uint256):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(totalSupply),
        ethereum.Value.fromString(name),
        ethereum.Value.fromString(symbol),
        ethereum.Value.fromUnsignedBigInt(decimals)
      ]
    );

    return result[0].toAddress();
  }

  try_createStdERC20(
    totalSupply: BigInt,
    name: string,
    symbol: string,
    decimals: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "createStdERC20",
      "createStdERC20(uint256,string,string,uint256):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(totalSupply),
        ethereum.Value.fromString(name),
        ethereum.Value.fromString(symbol),
        ethereum.Value.fromUnsignedBigInt(decimals)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  createMintableERC20(
    initSupply: BigInt,
    name: string,
    symbol: string,
    decimals: BigInt
  ): Address {
    let result = super.call(
      "createMintableERC20",
      "createMintableERC20(uint256,string,string,uint256):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(initSupply),
        ethereum.Value.fromString(name),
        ethereum.Value.fromString(symbol),
        ethereum.Value.fromUnsignedBigInt(decimals)
      ]
    );

    return result[0].toAddress();
  }

  try_createMintableERC20(
    initSupply: BigInt,
    name: string,
    symbol: string,
    decimals: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "createMintableERC20",
      "createMintableERC20(uint256,string,string,uint256):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(initSupply),
        ethereum.Value.fromString(name),
        ethereum.Value.fromString(symbol),
        ethereum.Value.fromUnsignedBigInt(decimals)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get cloneFactory(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get erc20Template(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get mintableErc20Template(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CreateStdERC20Call extends ethereum.Call {
  get inputs(): CreateStdERC20Call__Inputs {
    return new CreateStdERC20Call__Inputs(this);
  }

  get outputs(): CreateStdERC20Call__Outputs {
    return new CreateStdERC20Call__Outputs(this);
  }
}

export class CreateStdERC20Call__Inputs {
  _call: CreateStdERC20Call;

  constructor(call: CreateStdERC20Call) {
    this._call = call;
  }

  get totalSupply(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get name(): string {
    return this._call.inputValues[1].value.toString();
  }

  get symbol(): string {
    return this._call.inputValues[2].value.toString();
  }

  get decimals(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class CreateStdERC20Call__Outputs {
  _call: CreateStdERC20Call;

  constructor(call: CreateStdERC20Call) {
    this._call = call;
  }

  get newERC20(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class CreateMintableERC20Call extends ethereum.Call {
  get inputs(): CreateMintableERC20Call__Inputs {
    return new CreateMintableERC20Call__Inputs(this);
  }

  get outputs(): CreateMintableERC20Call__Outputs {
    return new CreateMintableERC20Call__Outputs(this);
  }
}

export class CreateMintableERC20Call__Inputs {
  _call: CreateMintableERC20Call;

  constructor(call: CreateMintableERC20Call) {
    this._call = call;
  }

  get initSupply(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get name(): string {
    return this._call.inputValues[1].value.toString();
  }

  get symbol(): string {
    return this._call.inputValues[2].value.toString();
  }

  get decimals(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class CreateMintableERC20Call__Outputs {
  _call: CreateMintableERC20Call;

  constructor(call: CreateMintableERC20Call) {
    this._call = call;
  }

  get newMintableERC20(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}
