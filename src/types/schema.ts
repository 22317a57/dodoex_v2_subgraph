// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class DodoZoo extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save DodoZoo entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save DodoZoo entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("DodoZoo", id.toString(), this);
  }

  static load(id: string): DodoZoo | null {
    return store.get("DodoZoo", id) as DodoZoo | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get pairCount(): i32 {
    let value = this.get("pairCount");
    return value.toI32();
  }

  set pairCount(value: i32) {
    this.set("pairCount", Value.fromI32(value));
  }

  get totalVolumeUSD(): BigDecimal {
    let value = this.get("totalVolumeUSD");
    return value.toBigDecimal();
  }

  set totalVolumeUSD(value: BigDecimal) {
    this.set("totalVolumeUSD", Value.fromBigDecimal(value));
  }

  get totalLiquidityUSD(): BigDecimal {
    let value = this.get("totalLiquidityUSD");
    return value.toBigDecimal();
  }

  set totalLiquidityUSD(value: BigDecimal) {
    this.set("totalLiquidityUSD", Value.fromBigDecimal(value));
  }

  get txCount(): BigInt {
    let value = this.get("txCount");
    return value.toBigInt();
  }

  set txCount(value: BigInt) {
    this.set("txCount", Value.fromBigInt(value));
  }
}

export class Token extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Token entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Token entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Token", id.toString(), this);
  }

  static load(id: string): Token | null {
    return store.get("Token", id) as Token | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get decimals(): BigInt {
    let value = this.get("decimals");
    return value.toBigInt();
  }

  set decimals(value: BigInt) {
    this.set("decimals", Value.fromBigInt(value));
  }

  get totalSupply(): BigInt {
    let value = this.get("totalSupply");
    return value.toBigInt();
  }

  set totalSupply(value: BigInt) {
    this.set("totalSupply", Value.fromBigInt(value));
  }

  get tradeVolume(): BigDecimal {
    let value = this.get("tradeVolume");
    return value.toBigDecimal();
  }

  set tradeVolume(value: BigDecimal) {
    this.set("tradeVolume", Value.fromBigDecimal(value));
  }

  get tradeVolumeUSD(): BigDecimal {
    let value = this.get("tradeVolumeUSD");
    return value.toBigDecimal();
  }

  set tradeVolumeUSD(value: BigDecimal) {
    this.set("tradeVolumeUSD", Value.fromBigDecimal(value));
  }

  get txCount(): BigInt {
    let value = this.get("txCount");
    return value.toBigInt();
  }

  set txCount(value: BigInt) {
    this.set("txCount", Value.fromBigInt(value));
  }

  get totalLiquidity(): BigDecimal {
    let value = this.get("totalLiquidity");
    return value.toBigDecimal();
  }

  set totalLiquidity(value: BigDecimal) {
    this.set("totalLiquidity", Value.fromBigDecimal(value));
  }

  get priceUsd(): BigDecimal {
    let value = this.get("priceUsd");
    return value.toBigDecimal();
  }

  set priceUsd(value: BigDecimal) {
    this.set("priceUsd", Value.fromBigDecimal(value));
  }
}

export class LpToken extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save LpToken entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save LpToken entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("LpToken", id.toString(), this);
  }

  static load(id: string): LpToken | null {
    return store.get("LpToken", id) as LpToken | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get decimals(): BigInt {
    let value = this.get("decimals");
    return value.toBigInt();
  }

  set decimals(value: BigInt) {
    this.set("decimals", Value.fromBigInt(value));
  }

  get totalSupply(): BigInt {
    let value = this.get("totalSupply");
    return value.toBigInt();
  }

  set totalSupply(value: BigInt) {
    this.set("totalSupply", Value.fromBigInt(value));
  }
}

export class Pair extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Pair entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Pair entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Pair", id.toString(), this);
  }

  static load(id: string): Pair | null {
    return store.get("Pair", id) as Pair | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get baseToken(): string {
    let value = this.get("baseToken");
    return value.toString();
  }

  set baseToken(value: string) {
    this.set("baseToken", Value.fromString(value));
  }

  get quoteToken(): string {
    let value = this.get("quoteToken");
    return value.toString();
  }

  set quoteToken(value: string) {
    this.set("quoteToken", Value.fromString(value));
  }

  get baseLpToken(): string | null {
    let value = this.get("baseLpToken");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set baseLpToken(value: string | null) {
    if (value === null) {
      this.unset("baseLpToken");
    } else {
      this.set("baseLpToken", Value.fromString(value as string));
    }
  }

  get quoteLpToken(): string | null {
    let value = this.get("quoteLpToken");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set quoteLpToken(value: string | null) {
    if (value === null) {
      this.unset("quoteLpToken");
    } else {
      this.set("quoteLpToken", Value.fromString(value as string));
    }
  }

  get baseReserve(): BigDecimal {
    let value = this.get("baseReserve");
    return value.toBigDecimal();
  }

  set baseReserve(value: BigDecimal) {
    this.set("baseReserve", Value.fromBigDecimal(value));
  }

  get quoteReserve(): BigDecimal {
    let value = this.get("quoteReserve");
    return value.toBigDecimal();
  }

  set quoteReserve(value: BigDecimal) {
    this.set("quoteReserve", Value.fromBigDecimal(value));
  }

  get reserveUSD(): BigDecimal {
    let value = this.get("reserveUSD");
    return value.toBigDecimal();
  }

  set reserveUSD(value: BigDecimal) {
    this.set("reserveUSD", Value.fromBigDecimal(value));
  }

  get baseLpTokenTotalSupply(): BigDecimal {
    let value = this.get("baseLpTokenTotalSupply");
    return value.toBigDecimal();
  }

  set baseLpTokenTotalSupply(value: BigDecimal) {
    this.set("baseLpTokenTotalSupply", Value.fromBigDecimal(value));
  }

  get quoteLpTokenTotalSupply(): BigDecimal {
    let value = this.get("quoteLpTokenTotalSupply");
    return value.toBigDecimal();
  }

  set quoteLpTokenTotalSupply(value: BigDecimal) {
    this.set("quoteLpTokenTotalSupply", Value.fromBigDecimal(value));
  }

  get midPrice(): BigDecimal {
    let value = this.get("midPrice");
    return value.toBigDecimal();
  }

  set midPrice(value: BigDecimal) {
    this.set("midPrice", Value.fromBigDecimal(value));
  }

  get lpFeeRate(): BigDecimal | null {
    let value = this.get("lpFeeRate");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set lpFeeRate(value: BigDecimal | null) {
    if (value === null) {
      this.unset("lpFeeRate");
    } else {
      this.set("lpFeeRate", Value.fromBigDecimal(value as BigDecimal));
    }
  }

  get mtFeeRate(): BigDecimal | null {
    let value = this.get("mtFeeRate");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set mtFeeRate(value: BigDecimal | null) {
    if (value === null) {
      this.unset("mtFeeRate");
    } else {
      this.set("mtFeeRate", Value.fromBigDecimal(value as BigDecimal));
    }
  }

  get volumeBaseToken(): BigDecimal {
    let value = this.get("volumeBaseToken");
    return value.toBigDecimal();
  }

  set volumeBaseToken(value: BigDecimal) {
    this.set("volumeBaseToken", Value.fromBigDecimal(value));
  }

  get volumeQuoteToken(): BigDecimal {
    let value = this.get("volumeQuoteToken");
    return value.toBigDecimal();
  }

  set volumeQuoteToken(value: BigDecimal) {
    this.set("volumeQuoteToken", Value.fromBigDecimal(value));
  }

  get txCount(): BigInt {
    let value = this.get("txCount");
    return value.toBigInt();
  }

  set txCount(value: BigInt) {
    this.set("txCount", Value.fromBigInt(value));
  }

  get createdAtTimestamp(): BigInt {
    let value = this.get("createdAtTimestamp");
    return value.toBigInt();
  }

  set createdAtTimestamp(value: BigInt) {
    this.set("createdAtTimestamp", Value.fromBigInt(value));
  }

  get createdAtBlockNumber(): BigInt {
    let value = this.get("createdAtBlockNumber");
    return value.toBigInt();
  }

  set createdAtBlockNumber(value: BigInt) {
    this.set("createdAtBlockNumber", Value.fromBigInt(value));
  }

  get baseLiquidityProviderCount(): BigInt {
    let value = this.get("baseLiquidityProviderCount");
    return value.toBigInt();
  }

  set baseLiquidityProviderCount(value: BigInt) {
    this.set("baseLiquidityProviderCount", Value.fromBigInt(value));
  }

  get quoteLiquidityProviderCount(): BigInt {
    let value = this.get("quoteLiquidityProviderCount");
    return value.toBigInt();
  }

  set quoteLiquidityProviderCount(value: BigInt) {
    this.set("quoteLiquidityProviderCount", Value.fromBigInt(value));
  }

  get liquidityPositions(): Array<string> {
    let value = this.get("liquidityPositions");
    return value.toStringArray();
  }

  set liquidityPositions(value: Array<string>) {
    this.set("liquidityPositions", Value.fromStringArray(value));
  }

  get liquidityPositionSnapshots(): Array<string> {
    let value = this.get("liquidityPositionSnapshots");
    return value.toStringArray();
  }

  set liquidityPositionSnapshots(value: Array<string>) {
    this.set("liquidityPositionSnapshots", Value.fromStringArray(value));
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save User entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save User entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("User", id.toString(), this);
  }

  static load(id: string): User | null {
    return store.get("User", id) as User | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get baseLiquidityPositions(): Array<string> | null {
    let value = this.get("baseLiquidityPositions");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set baseLiquidityPositions(value: Array<string> | null) {
    if (value === null) {
      this.unset("baseLiquidityPositions");
    } else {
      this.set(
        "baseLiquidityPositions",
        Value.fromStringArray(value as Array<string>)
      );
    }
  }

  get quoteLiquidityPositions(): Array<string> | null {
    let value = this.get("quoteLiquidityPositions");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set quoteLiquidityPositions(value: Array<string> | null) {
    if (value === null) {
      this.unset("quoteLiquidityPositions");
    } else {
      this.set(
        "quoteLiquidityPositions",
        Value.fromStringArray(value as Array<string>)
      );
    }
  }

  get usdSwapped(): BigDecimal {
    let value = this.get("usdSwapped");
    return value.toBigDecimal();
  }

  set usdSwapped(value: BigDecimal) {
    this.set("usdSwapped", Value.fromBigDecimal(value));
  }
}

export class LiquidityPosition extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save LiquidityPosition entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save LiquidityPosition entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("LiquidityPosition", id.toString(), this);
  }

  static load(id: string): LiquidityPosition | null {
    return store.get("LiquidityPosition", id) as LiquidityPosition | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    return value.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get pair(): string {
    let value = this.get("pair");
    return value.toString();
  }

  set pair(value: string) {
    this.set("pair", Value.fromString(value));
  }

  get baseLpTokenBalance(): BigDecimal {
    let value = this.get("baseLpTokenBalance");
    return value.toBigDecimal();
  }

  set baseLpTokenBalance(value: BigDecimal) {
    this.set("baseLpTokenBalance", Value.fromBigDecimal(value));
  }

  get quoteLpTokenBalance(): BigDecimal {
    let value = this.get("quoteLpTokenBalance");
    return value.toBigDecimal();
  }

  set quoteLpTokenBalance(value: BigDecimal) {
    this.set("quoteLpTokenBalance", Value.fromBigDecimal(value));
  }
}

export class LiquidityPositionSnapshot extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save LiquidityPositionSnapshot entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save LiquidityPositionSnapshot entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("LiquidityPositionSnapshot", id.toString(), this);
  }

  static load(id: string): LiquidityPositionSnapshot | null {
    return store.get(
      "LiquidityPositionSnapshot",
      id
    ) as LiquidityPositionSnapshot | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get liquidityPosition(): string {
    let value = this.get("liquidityPosition");
    return value.toString();
  }

  set liquidityPosition(value: string) {
    this.set("liquidityPosition", Value.fromString(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    return value.toI32();
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }

  get block(): i32 {
    let value = this.get("block");
    return value.toI32();
  }

  set block(value: i32) {
    this.set("block", Value.fromI32(value));
  }

  get user(): string {
    let value = this.get("user");
    return value.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get pair(): string {
    let value = this.get("pair");
    return value.toString();
  }

  set pair(value: string) {
    this.set("pair", Value.fromString(value));
  }

  get baseTokenPriceUSD(): BigDecimal | null {
    let value = this.get("baseTokenPriceUSD");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set baseTokenPriceUSD(value: BigDecimal | null) {
    if (value === null) {
      this.unset("baseTokenPriceUSD");
    } else {
      this.set("baseTokenPriceUSD", Value.fromBigDecimal(value as BigDecimal));
    }
  }

  get quoteTokenPriceUSD(): BigDecimal | null {
    let value = this.get("quoteTokenPriceUSD");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set quoteTokenPriceUSD(value: BigDecimal | null) {
    if (value === null) {
      this.unset("quoteTokenPriceUSD");
    } else {
      this.set("quoteTokenPriceUSD", Value.fromBigDecimal(value as BigDecimal));
    }
  }

  get baseReserve(): BigDecimal {
    let value = this.get("baseReserve");
    return value.toBigDecimal();
  }

  set baseReserve(value: BigDecimal) {
    this.set("baseReserve", Value.fromBigDecimal(value));
  }

  get quoteReserve(): BigDecimal {
    let value = this.get("quoteReserve");
    return value.toBigDecimal();
  }

  set quoteReserve(value: BigDecimal) {
    this.set("quoteReserve", Value.fromBigDecimal(value));
  }

  get reserveUSD(): BigDecimal | null {
    let value = this.get("reserveUSD");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set reserveUSD(value: BigDecimal | null) {
    if (value === null) {
      this.unset("reserveUSD");
    } else {
      this.set("reserveUSD", Value.fromBigDecimal(value as BigDecimal));
    }
  }

  get baseLpTokenTotalSupply(): BigDecimal {
    let value = this.get("baseLpTokenTotalSupply");
    return value.toBigDecimal();
  }

  set baseLpTokenTotalSupply(value: BigDecimal) {
    this.set("baseLpTokenTotalSupply", Value.fromBigDecimal(value));
  }

  get quoteLpTokenTotalSupply(): BigDecimal {
    let value = this.get("quoteLpTokenTotalSupply");
    return value.toBigDecimal();
  }

  set quoteLpTokenTotalSupply(value: BigDecimal) {
    this.set("quoteLpTokenTotalSupply", Value.fromBigDecimal(value));
  }
}

export class Transaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Transaction entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Transaction entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Transaction", id.toString(), this);
  }

  static load(id: string): Transaction | null {
    return store.get("Transaction", id) as Transaction | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get mints(): Array<string | null> {
    let value = this.get("mints");
    return value.toStringArray();
  }

  set mints(value: Array<string | null>) {
    this.set("mints", Value.fromStringArray(value));
  }

  get burns(): Array<string | null> {
    let value = this.get("burns");
    return value.toStringArray();
  }

  set burns(value: Array<string | null>) {
    this.set("burns", Value.fromStringArray(value));
  }

  get swaps(): Array<string | null> {
    let value = this.get("swaps");
    return value.toStringArray();
  }

  set swaps(value: Array<string | null>) {
    this.set("swaps", Value.fromStringArray(value));
  }
}

export class Mint extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Mint entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Mint entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Mint", id.toString(), this);
  }

  static load(id: string): Mint | null {
    return store.get("Mint", id) as Mint | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get pair(): string {
    let value = this.get("pair");
    return value.toString();
  }

  set pair(value: string) {
    this.set("pair", Value.fromString(value));
  }

  get to(): Bytes {
    let value = this.get("to");
    return value.toBytes();
  }

  set to(value: Bytes) {
    this.set("to", Value.fromBytes(value));
  }

  get baseLpAmount(): BigDecimal {
    let value = this.get("baseLpAmount");
    return value.toBigDecimal();
  }

  set baseLpAmount(value: BigDecimal) {
    this.set("baseLpAmount", Value.fromBigDecimal(value));
  }

  get quoteLpAmount(): BigDecimal {
    let value = this.get("quoteLpAmount");
    return value.toBigDecimal();
  }

  set quoteLpAmount(value: BigDecimal) {
    this.set("quoteLpAmount", Value.fromBigDecimal(value));
  }

  get sender(): Bytes | null {
    let value = this.get("sender");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set sender(value: Bytes | null) {
    if (value === null) {
      this.unset("sender");
    } else {
      this.set("sender", Value.fromBytes(value as Bytes));
    }
  }

  get baseAmount(): BigDecimal | null {
    let value = this.get("baseAmount");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set baseAmount(value: BigDecimal | null) {
    if (value === null) {
      this.unset("baseAmount");
    } else {
      this.set("baseAmount", Value.fromBigDecimal(value as BigDecimal));
    }
  }

  get quoteAmount(): BigDecimal | null {
    let value = this.get("quoteAmount");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set quoteAmount(value: BigDecimal | null) {
    if (value === null) {
      this.unset("quoteAmount");
    } else {
      this.set("quoteAmount", Value.fromBigDecimal(value as BigDecimal));
    }
  }

  get logIndex(): BigInt | null {
    let value = this.get("logIndex");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set logIndex(value: BigInt | null) {
    if (value === null) {
      this.unset("logIndex");
    } else {
      this.set("logIndex", Value.fromBigInt(value as BigInt));
    }
  }

  get amountUSD(): BigDecimal | null {
    let value = this.get("amountUSD");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set amountUSD(value: BigDecimal | null) {
    if (value === null) {
      this.unset("amountUSD");
    } else {
      this.set("amountUSD", Value.fromBigDecimal(value as BigDecimal));
    }
  }
}

export class Burn extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Burn entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Burn entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Burn", id.toString(), this);
  }

  static load(id: string): Burn | null {
    return store.get("Burn", id) as Burn | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get pair(): string {
    let value = this.get("pair");
    return value.toString();
  }

  set pair(value: string) {
    this.set("pair", Value.fromString(value));
  }

  get to(): Bytes {
    let value = this.get("to");
    return value.toBytes();
  }

  set to(value: Bytes) {
    this.set("to", Value.fromBytes(value));
  }

  get baseLpAmount(): BigDecimal {
    let value = this.get("baseLpAmount");
    return value.toBigDecimal();
  }

  set baseLpAmount(value: BigDecimal) {
    this.set("baseLpAmount", Value.fromBigDecimal(value));
  }

  get quoteLpAmount(): BigDecimal {
    let value = this.get("quoteLpAmount");
    return value.toBigDecimal();
  }

  set quoteLpAmount(value: BigDecimal) {
    this.set("quoteLpAmount", Value.fromBigDecimal(value));
  }

  get sender(): Bytes | null {
    let value = this.get("sender");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set sender(value: Bytes | null) {
    if (value === null) {
      this.unset("sender");
    } else {
      this.set("sender", Value.fromBytes(value as Bytes));
    }
  }

  get baseAmount(): BigDecimal | null {
    let value = this.get("baseAmount");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set baseAmount(value: BigDecimal | null) {
    if (value === null) {
      this.unset("baseAmount");
    } else {
      this.set("baseAmount", Value.fromBigDecimal(value as BigDecimal));
    }
  }

  get quoteAmount(): BigDecimal | null {
    let value = this.get("quoteAmount");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set quoteAmount(value: BigDecimal | null) {
    if (value === null) {
      this.unset("quoteAmount");
    } else {
      this.set("quoteAmount", Value.fromBigDecimal(value as BigDecimal));
    }
  }

  get logIndex(): BigInt | null {
    let value = this.get("logIndex");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set logIndex(value: BigInt | null) {
    if (value === null) {
      this.unset("logIndex");
    } else {
      this.set("logIndex", Value.fromBigInt(value as BigInt));
    }
  }

  get amountUSD(): BigDecimal | null {
    let value = this.get("amountUSD");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set amountUSD(value: BigDecimal | null) {
    if (value === null) {
      this.unset("amountUSD");
    } else {
      this.set("amountUSD", Value.fromBigDecimal(value as BigDecimal));
    }
  }
}

export class Swap extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Swap entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Swap entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Swap", id.toString(), this);
  }

  static load(id: string): Swap | null {
    return store.get("Swap", id) as Swap | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get pair(): string {
    let value = this.get("pair");
    return value.toString();
  }

  set pair(value: string) {
    this.set("pair", Value.fromString(value));
  }

  get sender(): Bytes {
    let value = this.get("sender");
    return value.toBytes();
  }

  set sender(value: Bytes) {
    this.set("sender", Value.fromBytes(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    return value.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get baseSwapped(): BigDecimal {
    let value = this.get("baseSwapped");
    return value.toBigDecimal();
  }

  set baseSwapped(value: BigDecimal) {
    this.set("baseSwapped", Value.fromBigDecimal(value));
  }

  get quoteSwapped(): BigDecimal {
    let value = this.get("quoteSwapped");
    return value.toBigDecimal();
  }

  set quoteSwapped(value: BigDecimal) {
    this.set("quoteSwapped", Value.fromBigDecimal(value));
  }

  get isSellBase(): boolean {
    let value = this.get("isSellBase");
    return value.toBoolean();
  }

  set isSellBase(value: boolean) {
    this.set("isSellBase", Value.fromBoolean(value));
  }

  get to(): Bytes {
    let value = this.get("to");
    return value.toBytes();
  }

  set to(value: Bytes) {
    this.set("to", Value.fromBytes(value));
  }

  get logIndex(): BigInt | null {
    let value = this.get("logIndex");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set logIndex(value: BigInt | null) {
    if (value === null) {
      this.unset("logIndex");
    } else {
      this.set("logIndex", Value.fromBigInt(value as BigInt));
    }
  }

  get amountUSD(): BigDecimal {
    let value = this.get("amountUSD");
    return value.toBigDecimal();
  }

  set amountUSD(value: BigDecimal) {
    this.set("amountUSD", Value.fromBigDecimal(value));
  }
}

export class Bundle extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Bundle entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Bundle entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Bundle", id.toString(), this);
  }

  static load(id: string): Bundle | null {
    return store.get("Bundle", id) as Bundle | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get ethPrice(): BigDecimal {
    let value = this.get("ethPrice");
    return value.toBigDecimal();
  }

  set ethPrice(value: BigDecimal) {
    this.set("ethPrice", Value.fromBigDecimal(value));
  }
}

export class DodoDayData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save DodoDayData entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save DodoDayData entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("DodoDayData", id.toString(), this);
  }

  static load(id: string): DodoDayData | null {
    return store.get("DodoDayData", id) as DodoDayData | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get date(): i32 {
    let value = this.get("date");
    return value.toI32();
  }

  set date(value: i32) {
    this.set("date", Value.fromI32(value));
  }

  get dailyVolumeUSD(): BigDecimal {
    let value = this.get("dailyVolumeUSD");
    return value.toBigDecimal();
  }

  set dailyVolumeUSD(value: BigDecimal) {
    this.set("dailyVolumeUSD", Value.fromBigDecimal(value));
  }

  get totalVolumeUSD(): BigDecimal {
    let value = this.get("totalVolumeUSD");
    return value.toBigDecimal();
  }

  set totalVolumeUSD(value: BigDecimal) {
    this.set("totalVolumeUSD", Value.fromBigDecimal(value));
  }

  get totalLiquidityUSD(): BigDecimal {
    let value = this.get("totalLiquidityUSD");
    return value.toBigDecimal();
  }

  set totalLiquidityUSD(value: BigDecimal) {
    this.set("totalLiquidityUSD", Value.fromBigDecimal(value));
  }

  get txCount(): BigInt {
    let value = this.get("txCount");
    return value.toBigInt();
  }

  set txCount(value: BigInt) {
    this.set("txCount", Value.fromBigInt(value));
  }
}

export class PairHourData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save PairHourData entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save PairHourData entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("PairHourData", id.toString(), this);
  }

  static load(id: string): PairHourData | null {
    return store.get("PairHourData", id) as PairHourData | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get hourStartUnix(): i32 {
    let value = this.get("hourStartUnix");
    return value.toI32();
  }

  set hourStartUnix(value: i32) {
    this.set("hourStartUnix", Value.fromI32(value));
  }

  get pair(): string {
    let value = this.get("pair");
    return value.toString();
  }

  set pair(value: string) {
    this.set("pair", Value.fromString(value));
  }

  get baseTokenReserve(): BigDecimal {
    let value = this.get("baseTokenReserve");
    return value.toBigDecimal();
  }

  set baseTokenReserve(value: BigDecimal) {
    this.set("baseTokenReserve", Value.fromBigDecimal(value));
  }

  get quoteTokenReserve(): BigDecimal {
    let value = this.get("quoteTokenReserve");
    return value.toBigDecimal();
  }

  set quoteTokenReserve(value: BigDecimal) {
    this.set("quoteTokenReserve", Value.fromBigDecimal(value));
  }

  get reserveUSD(): BigDecimal {
    let value = this.get("reserveUSD");
    return value.toBigDecimal();
  }

  set reserveUSD(value: BigDecimal) {
    this.set("reserveUSD", Value.fromBigDecimal(value));
  }

  get hourlyVolumeBase(): BigDecimal {
    let value = this.get("hourlyVolumeBase");
    return value.toBigDecimal();
  }

  set hourlyVolumeBase(value: BigDecimal) {
    this.set("hourlyVolumeBase", Value.fromBigDecimal(value));
  }

  get hourlyVolumeQuote(): BigDecimal {
    let value = this.get("hourlyVolumeQuote");
    return value.toBigDecimal();
  }

  set hourlyVolumeQuote(value: BigDecimal) {
    this.set("hourlyVolumeQuote", Value.fromBigDecimal(value));
  }

  get hourlyVolumeUSD(): BigDecimal {
    let value = this.get("hourlyVolumeUSD");
    return value.toBigDecimal();
  }

  set hourlyVolumeUSD(value: BigDecimal) {
    this.set("hourlyVolumeUSD", Value.fromBigDecimal(value));
  }

  get hourlyTxns(): BigInt {
    let value = this.get("hourlyTxns");
    return value.toBigInt();
  }

  set hourlyTxns(value: BigInt) {
    this.set("hourlyTxns", Value.fromBigInt(value));
  }

  get openPrice(): BigDecimal {
    let value = this.get("openPrice");
    return value.toBigDecimal();
  }

  set openPrice(value: BigDecimal) {
    this.set("openPrice", Value.fromBigDecimal(value));
  }

  get higherPrice(): BigDecimal {
    let value = this.get("higherPrice");
    return value.toBigDecimal();
  }

  set higherPrice(value: BigDecimal) {
    this.set("higherPrice", Value.fromBigDecimal(value));
  }

  get lowerPrice(): BigDecimal {
    let value = this.get("lowerPrice");
    return value.toBigDecimal();
  }

  set lowerPrice(value: BigDecimal) {
    this.set("lowerPrice", Value.fromBigDecimal(value));
  }

  get closePrice(): BigDecimal {
    let value = this.get("closePrice");
    return value.toBigDecimal();
  }

  set closePrice(value: BigDecimal) {
    this.set("closePrice", Value.fromBigDecimal(value));
  }
}

export class PairDayData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save PairDayData entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save PairDayData entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("PairDayData", id.toString(), this);
  }

  static load(id: string): PairDayData | null {
    return store.get("PairDayData", id) as PairDayData | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get date(): i32 {
    let value = this.get("date");
    return value.toI32();
  }

  set date(value: i32) {
    this.set("date", Value.fromI32(value));
  }

  get pairAddress(): Bytes {
    let value = this.get("pairAddress");
    return value.toBytes();
  }

  set pairAddress(value: Bytes) {
    this.set("pairAddress", Value.fromBytes(value));
  }

  get baseToken(): string {
    let value = this.get("baseToken");
    return value.toString();
  }

  set baseToken(value: string) {
    this.set("baseToken", Value.fromString(value));
  }

  get quoteToken(): string {
    let value = this.get("quoteToken");
    return value.toString();
  }

  set quoteToken(value: string) {
    this.set("quoteToken", Value.fromString(value));
  }

  get baseTokenReserve(): BigDecimal {
    let value = this.get("baseTokenReserve");
    return value.toBigDecimal();
  }

  set baseTokenReserve(value: BigDecimal) {
    this.set("baseTokenReserve", Value.fromBigDecimal(value));
  }

  get quoteTokenReserve(): BigDecimal {
    let value = this.get("quoteTokenReserve");
    return value.toBigDecimal();
  }

  set quoteTokenReserve(value: BigDecimal) {
    this.set("quoteTokenReserve", Value.fromBigDecimal(value));
  }

  get baseLpTokenTotalSupply(): BigDecimal {
    let value = this.get("baseLpTokenTotalSupply");
    return value.toBigDecimal();
  }

  set baseLpTokenTotalSupply(value: BigDecimal) {
    this.set("baseLpTokenTotalSupply", Value.fromBigDecimal(value));
  }

  get quoteLpTokenTotalSupply(): BigDecimal {
    let value = this.get("quoteLpTokenTotalSupply");
    return value.toBigDecimal();
  }

  set quoteLpTokenTotalSupply(value: BigDecimal) {
    this.set("quoteLpTokenTotalSupply", Value.fromBigDecimal(value));
  }

  get reserveUSD(): BigDecimal {
    let value = this.get("reserveUSD");
    return value.toBigDecimal();
  }

  set reserveUSD(value: BigDecimal) {
    this.set("reserveUSD", Value.fromBigDecimal(value));
  }

  get dailyVolumeBase(): BigDecimal {
    let value = this.get("dailyVolumeBase");
    return value.toBigDecimal();
  }

  set dailyVolumeBase(value: BigDecimal) {
    this.set("dailyVolumeBase", Value.fromBigDecimal(value));
  }

  get dailyVolumeQuote(): BigDecimal {
    let value = this.get("dailyVolumeQuote");
    return value.toBigDecimal();
  }

  set dailyVolumeQuote(value: BigDecimal) {
    this.set("dailyVolumeQuote", Value.fromBigDecimal(value));
  }

  get dailyVolumeUSD(): BigDecimal {
    let value = this.get("dailyVolumeUSD");
    return value.toBigDecimal();
  }

  set dailyVolumeUSD(value: BigDecimal) {
    this.set("dailyVolumeUSD", Value.fromBigDecimal(value));
  }

  get dailyTxns(): BigInt {
    let value = this.get("dailyTxns");
    return value.toBigInt();
  }

  set dailyTxns(value: BigInt) {
    this.set("dailyTxns", Value.fromBigInt(value));
  }
}

export class TokenDayData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save TokenDayData entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save TokenDayData entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("TokenDayData", id.toString(), this);
  }

  static load(id: string): TokenDayData | null {
    return store.get("TokenDayData", id) as TokenDayData | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get date(): i32 {
    let value = this.get("date");
    return value.toI32();
  }

  set date(value: i32) {
    this.set("date", Value.fromI32(value));
  }

  get token(): string {
    let value = this.get("token");
    return value.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get dailyVolumeToken(): BigDecimal {
    let value = this.get("dailyVolumeToken");
    return value.toBigDecimal();
  }

  set dailyVolumeToken(value: BigDecimal) {
    this.set("dailyVolumeToken", Value.fromBigDecimal(value));
  }

  get dailyVolumeUSD(): BigDecimal {
    let value = this.get("dailyVolumeUSD");
    return value.toBigDecimal();
  }

  set dailyVolumeUSD(value: BigDecimal) {
    this.set("dailyVolumeUSD", Value.fromBigDecimal(value));
  }

  get dailyTxns(): BigInt {
    let value = this.get("dailyTxns");
    return value.toBigInt();
  }

  set dailyTxns(value: BigInt) {
    this.set("dailyTxns", Value.fromBigInt(value));
  }

  get totalLiquidityToken(): BigDecimal {
    let value = this.get("totalLiquidityToken");
    return value.toBigDecimal();
  }

  set totalLiquidityToken(value: BigDecimal) {
    this.set("totalLiquidityToken", Value.fromBigDecimal(value));
  }

  get totalLiquidityUSD(): BigDecimal {
    let value = this.get("totalLiquidityUSD");
    return value.toBigDecimal();
  }

  set totalLiquidityUSD(value: BigDecimal) {
    this.set("totalLiquidityUSD", Value.fromBigDecimal(value));
  }

  get priceUSD(): BigDecimal | null {
    let value = this.get("priceUSD");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set priceUSD(value: BigDecimal | null) {
    if (value === null) {
      this.unset("priceUSD");
    } else {
      this.set("priceUSD", Value.fromBigDecimal(value as BigDecimal));
    }
  }
}
